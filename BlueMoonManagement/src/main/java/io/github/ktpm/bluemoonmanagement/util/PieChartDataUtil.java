package io.github.ktpm.bluemoonmanagement.util;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto;
import io.github.ktpm.bluemoonmanagement.service.khoanThu.KhoanThuService;

/**
 * Utility class ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu cho PieChart
 * T√°ch logic kh·ªèi controller ƒë·ªÉ code s·∫°ch h∆°n
 */
public class PieChartDataUtil {
    
    /**
     * L·∫•y d·ªØ li·ªáu kho·∫£n thu cho PieChart - Query tr·ª±c ti·∫øp t·ª´ database
     * @param khoanThuService Service ƒë·ªÉ query database
     * @return Map v·ªõi key l√† label hi·ªÉn th·ªã, value l√† s·ªë l∆∞·ª£ng
     */
    public static Map<String, Integer> getKhoanThuDataFromDatabase(KhoanThuService khoanThuService) {
        try {
            if (khoanThuService == null) {
                System.err.println("‚ö†Ô∏è KhoanThuService is null, cannot get data");
                return null;
            }
            

            // Query tr·ª±c ti·∫øp t·ª´ database ƒë·ªÉ ƒë·∫øm kho·∫£n thu b·∫Øt bu·ªôc
            long totalBatBuoc = khoanThuService.countKhoanThuByBatBuoc(true);
            long totalAmountBatBuoc = khoanThuService.sumAmountByBatBuoc(true);
            
            // Query tr·ª±c ti·∫øp t·ª´ database ƒë·ªÉ ƒë·∫øm kho·∫£n thu t·ª± nguy·ªán  
            long totalTuNguyen = khoanThuService.countKhoanThuByBatBuoc(false);
            long totalAmountTuNguyen = khoanThuService.sumAmountByBatBuoc(false);
            
            Map<String, Integer> feeTypeCount = new HashMap<>();
            
            // T·∫°o label c√≥ th√¥ng tin chi ti·∫øt
            if (totalBatBuoc > 0) {
                String labelBatBuoc = String.format("B·∫Øt bu·ªôc (%d kho·∫£n - %,d VNƒê)", 
                    totalBatBuoc, totalAmountBatBuoc);
                feeTypeCount.put(labelBatBuoc, (int)totalBatBuoc);

            }
            
            if (totalTuNguyen > 0) {
                String labelTuNguyen = String.format("T·ª± nguy·ªán (%d kho·∫£n - %,d VNƒê)", 
                    totalTuNguyen, totalAmountTuNguyen);
                feeTypeCount.put(labelTuNguyen, (int)totalTuNguyen);
            }            
            return feeTypeCount;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting fee data from database: " + e.getMessage());
            e.printStackTrace();
            // Fallback to list-based approach
            return getKhoanThuDataFromList(khoanThuService);
        }
    }
    
    /**
     * Fallback method: L·∫•y d·ªØ li·ªáu t·ª´ list (khi mapper tr·ª±c ti·∫øp g·∫∑p l·ªói)
     * @param khoanThuService Service ƒë·ªÉ l·∫•y list d·ªØ li·ªáu
     * @return Map v·ªõi key l√† label hi·ªÉn th·ªã, value l√† s·ªë l∆∞·ª£ng
     */
    public static Map<String, Integer> getKhoanThuDataFromList(KhoanThuService khoanThuService) {
        try {
            if (khoanThuService == null) {
                System.err.println("‚ö†Ô∏è KhoanThuService is null, cannot get data");
                return null;
            }
            
            // L·∫•y t·∫•t c·∫£ kho·∫£n thu t·ª´ database
            List<KhoanThuDto> allKhoanThu = khoanThuService.getAllKhoanThu();
            
            if (allKhoanThu == null || allKhoanThu.isEmpty()) {
                return null;
            }
            
            // Ph√¢n t√≠ch d·ªØ li·ªáu theo B·∫Øt bu·ªôc vs T·ª± nguy·ªán
            Map<String, Integer> feeTypeCount = new HashMap<>();
            int totalBatBuoc = 0;
            int totalTuNguyen = 0;
            long totalAmountBatBuoc = 0;
            long totalAmountTuNguyen = 0;
            
            for (KhoanThuDto dto : allKhoanThu) {
                // S·ª≠ d·ª•ng field batBuoc c√≥ s·∫µn trong DTO
                boolean isBatBuoc = dto.isBatBuoc();
                
                if (isBatBuoc) {
                    totalBatBuoc++;
                    totalAmountBatBuoc += dto.getSoTien();
                } else {
                    totalTuNguyen++;
                    totalAmountTuNguyen += dto.getSoTien();
                }
            }
            
            // T·∫°o label c√≥ th√¥ng tin chi ti·∫øt
            if (totalBatBuoc > 0) {
                String labelBatBuoc = String.format("B·∫Øt bu·ªôc (%d kho·∫£n - %,d VNƒê)", 
                    totalBatBuoc, totalAmountBatBuoc);
                feeTypeCount.put(labelBatBuoc, totalBatBuoc);
            }
            
            if (totalTuNguyen > 0) {
                String labelTuNguyen = String.format("T·ª± nguy·ªán (%d kho·∫£n - %,d VNƒê)", 
                    totalTuNguyen, totalAmountTuNguyen);
                feeTypeCount.put(labelTuNguyen, totalTuNguyen);
            }
            

            return feeTypeCount;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error getting fee data from list: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * L·∫•y m√†u cho PieChart slice d·ª±a tr√™n t√™n data
     * @param dataName T√™n c·ªßa data slice
     * @param colorIndex Index c·ªßa m√†u m·∫∑c ƒë·ªãnh
     * @return M√£ m√†u CSS
     */
    public static String getSliceColor(String dataName, int colorIndex) {
        if (dataName == null) {
            return getDefaultColor(colorIndex);
        }
        
        String lowerName = dataName.toLowerCase();
        
        if (lowerName.contains("b·∫Øt bu·ªôc")) {
            return "#2196F3"; // üîµ M√†u xanh cho B·∫Øt bu·ªôc
        } else if (lowerName.contains("t·ª± nguy·ªán")) {
            return "#FF9800"; // üü† M√†u cam cho T·ª± nguy·ªán  
        } else {
            return getDefaultColor(colorIndex);
        }
    }
    
    /**
     * L·∫•y m√†u m·∫∑c ƒë·ªãnh theo index
     * @param colorIndex Index c·ªßa m√†u
     * @return M√£ m√†u CSS
     */
    private static String getDefaultColor(int colorIndex) {
        // M√†u m·∫∑c ƒë·ªãnh: Xanh, Cam, Xanh l√°, T√≠m
        String[] defaultColors = {
            "#2196F3", // üîµ Xanh - cho B·∫Øt bu·ªôc n·∫øu kh√¥ng match
            "#FF9800", // üü† Cam - cho T·ª± nguy·ªán n·∫øu kh√¥ng match  

        };
        return defaultColors[colorIndex % defaultColors.length];
    }
} 