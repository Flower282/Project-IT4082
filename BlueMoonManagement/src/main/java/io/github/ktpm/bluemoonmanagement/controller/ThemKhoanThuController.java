package io.github.ktpm.bluemoonmanagement.controller;

import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
import io.github.ktpm.bluemoonmanagement.model.dto.ResponseDto;
import io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto;
import io.github.ktpm.bluemoonmanagement.model.dto.phiGuiXe.PhiGuiXeDto;
import io.github.ktpm.bluemoonmanagement.service.khoanThu.KhoanThuService;
import io.github.ktpm.bluemoonmanagement.session.Session;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class ThemKhoanThuController {

    @FXML
    private FontAwesomeIcon buttonClose;

    @FXML
    private Button buttonThemKhoanThu;

    @FXML
    private Button button_close_up;



    @FXML
    private ComboBox<String> comboBoxDonViTinh;

    @FXML
    private ComboBox<String> comboBoxLoaiKhoanThu;

    @FXML
    private ComboBox<String> comboBoxPhamVi;

    @FXML
    private ComboBox<String> comboBoxBoPhanQuanLy;

    @FXML
    private DatePicker datePickerHanNop;

    @FXML
    private HBox text;

    @FXML
    private HBox text11;

    @FXML
    private HBox phuongTienHbox;

    @FXML
    private Text textError;

    @FXML
    private TextField textFieldDonGia;

    @FXML
    private TextField textFieldGiaXeDap;

    @FXML
    private TextField textFieldGiaXeMay;

    @FXML
    private TextField textFieldGiaXeOTo;

    @FXML
    private TextField textFieldTenCoQuan;

    @FXML
    private TextField textFieldTenKhoanThu;


    @Autowired
    private KhoanThuService khoanThuService;
    
    @Autowired
    private org.springframework.context.ApplicationContext applicationContext;

    public void initialize() {
        // Kh·ªüi t·∫°o c√°c ComboBox v·ªõi d·ªØ li·ªáu m·∫´u
        comboBoxLoaiKhoanThu.getItems().addAll("B·∫Øt bu·ªôc", "T·ª± nguy·ªán");
        comboBoxDonViTinh.getItems().addAll("Di·ªán t√≠ch", "CƒÉn h·ªô", "Ph∆∞∆°ng ti·ªán");
        comboBoxPhamVi.getItems().addAll(
            "T·∫•t c·∫£", 
            "CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng"
        );
        comboBoxBoPhanQuanLy.getItems().addAll("Ban qu·∫£n l√Ω", "B√™n th·ª© 3");

        // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa comboBoxDonViTinh ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã
        comboBoxDonViTinh.setOnAction(this::onDonViTinhChanged);

        // G·ªçi h√†m x·ª≠ l√Ω ban ƒë·∫ßu
        onDonViTinhChanged(null); // Ki·ªÉm tra ngay khi b·∫Øt ƒë·∫ßu
        
        // Setup close button
        if (button_close_up != null) {
            button_close_up.setOnAction(this::handleClose);
        }
    }
    @FXML
    private void onDonViTinhChanged(ActionEvent event) {
        // Ki·ªÉm tra n·∫øu "Ph∆∞∆°ng ti·ªán" ƒë∆∞·ª£c ch·ªçn
        if ("Ph∆∞∆°ng ti·ªán".equals(comboBoxDonViTinh.getValue())) {
            phuongTienHbox.setVisible(true);
            // Hi·ªÉn th·ªã c√°c tr∆∞·ªùng nh·∫≠p li·ªáu cho ph∆∞∆°ng ti·ªán v√† cho ph√©p nh·∫≠p
            textFieldGiaXeDap.setDisable(false);
            textFieldGiaXeMay.setDisable(false);
            textFieldGiaXeOTo.setDisable(false);

            textFieldGiaXeDap.setVisible(true);
            textFieldGiaXeMay.setVisible(true);
            textFieldGiaXeOTo.setVisible(true);
        } else {
            phuongTienHbox.setVisible(false);
            // ·∫®n c√°c tr∆∞·ªùng nh·∫≠p li·ªáu cho ph∆∞∆°ng ti·ªán v√† v√¥ hi·ªáu h√≥a ch√∫ng
            textFieldGiaXeDap.setDisable(true);
            textFieldGiaXeMay.setDisable(true);
            textFieldGiaXeOTo.setDisable(true);

            textFieldGiaXeDap.setVisible(false);
            textFieldGiaXeMay.setVisible(false);
            textFieldGiaXeOTo.setVisible(false);
        }
    }
    @FXML
    void ThemKhoanThuClicked(ActionEvent event) {
        // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán
        if (!hasPermission()) {
            textError.setText("Ch·ªâ K·∫ø to√°n m·ªõi c√≥ quy·ªÅn th√™m kho·∫£n thu.");
            textError.setStyle("-fx-fill: red;");
            return;
        }

        if (isAnyFieldEmpty()) {
            textError.setText("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            textError.setStyle("-fx-fill: red;");
            return; // Ng·ª´ng x·ª≠ l√Ω n·∫øu c√≥ tr∆∞·ªùng tr·ªëng
        }
        // L·∫•y th√¥ng tin t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        String tenKhoanThu = textFieldTenKhoanThu.getText();  // T√™n kho·∫£n thu
        String loaiKhoanThu = comboBoxLoaiKhoanThu.getValue().toString();  // Lo·∫°i kho·∫£n thu
        String boPhanQuanLy = comboBoxBoPhanQuanLy.getValue().toString();  // B·ªô ph·∫≠n qu·∫£n l√Ω
        String thoiHanNop = datePickerHanNop.getValue().toString();  // Th·ªùi h·∫°n (ng√†y n·ªôp)
        String donViTinh = comboBoxDonViTinh.getValue().toString();  // ƒê∆°n v·ªã t√≠nh
        int soTien = Integer.parseInt(textFieldDonGia.getText());  // S·ªë ti·ªÅn
        String phamVi = comboBoxPhamVi.getValue().toString();  // Ph·∫°m vi
        // L·∫•y s·ªë ti·ªÅn t·ª´ c√°c TextField
        String giaXeDap = textFieldGiaXeDap.getText();  // Gi√° xe ƒë·∫°p
        String giaXeMay = textFieldGiaXeMay.getText();  // Gi√° xe m√°y
        String giaXeOTo = textFieldGiaXeOTo.getText();  // Gi√° xe √¥ t√¥
        String donGia = textFieldDonGia.getText();  // ƒê∆°n gi√°

        // L·∫•y ng√†y t·∫°o (h√¥m nay)
        String ngayTao = java.time.LocalDate.now().toString();  // Ng√†y t·∫°o (h√¥m nay)

        KhoanThuDto khoanThuDto = new KhoanThuDto();
        khoanThuDto.setTenKhoanThu(tenKhoanThu);
        khoanThuDto.setBatBuoc("B·∫Øt bu·ªôc".equals(loaiKhoanThu));  // Ki·ªÉm tra lo·∫°i kho·∫£n thu
        khoanThuDto.setDonViTinh(donViTinh);
        khoanThuDto.setSoTien(soTien);
        khoanThuDto.setPhamVi(phamVi);
        khoanThuDto.setNgayTao(java.time.LocalDate.parse(ngayTao));
        khoanThuDto.setThoiHan(java.time.LocalDate.parse(thoiHanNop));
        khoanThuDto.setGhiChu(boPhanQuanLy); // S·ª≠ d·ª•ng b·ªô ph·∫≠n qu·∫£n l√Ω l√†m ghi ch√∫

        // G·ªçi service ƒë·ªÉ th√™m kho·∫£n thu
        ResponseDto response = khoanThuService.addKhoanThu(khoanThuDto);
        if (response.isSuccess()) {
            textError.setText("Th√™m kho·∫£n thu th√†nh c√¥ng!");
            textError.setStyle("-fx-fill: green;");

            // Refresh kho·∫£n thu table
            refreshKhoanThuTable();
            
            // Close window after successful addition
            javafx.application.Platform.runLater(() -> {
                try {
                    Thread.sleep(1500); // Show success message for 1.5 seconds
                    handleClose(null);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    handleClose(null);
                }
            });

        } else {
            textError.setText("L·ªói: " + response.getMessage());
            textError.setStyle("-fx-fill: red;");
        }
        // T·∫°o danh s√°ch phiGuiXeDtos n·∫øu ƒë∆°n v·ªã t√≠nh l√† "Ph∆∞∆°ng ti·ªán"
        String maKhoanThu = khoanThuDto.getMaKhoanThu();
        List<PhiGuiXeDto> phiGuiXeDtos= new ArrayList<>();
        if ("Ph∆∞∆°ng ti·ªán".equals(donViTinh)) {
            // Ch·ªâ th√™m c√°c kho·∫£n ph√≠ n·∫øu ƒë∆°n v·ªã t√≠nh l√† "Ph∆∞∆°ng ti·ªán"
            if (!giaXeDap.isEmpty()) {
                phiGuiXeDtos.add(new PhiGuiXeDto("Xe ƒë·∫°p", Integer.parseInt(giaXeDap),maKhoanThu));
            }
            if (!giaXeMay.isEmpty()) {
                phiGuiXeDtos.add(new PhiGuiXeDto("Xe m√°y", Integer.parseInt(giaXeMay),maKhoanThu));
            }
            if (!giaXeOTo.isEmpty()) {
                phiGuiXeDtos.add(new PhiGuiXeDto( "√î t√¥", Integer.parseInt(giaXeOTo),maKhoanThu));
            }
        }
        // G√°n danh s√°ch phiGuiXeDtos v√†o khoanThuDto
        khoanThuDto.setPhiGuiXeList(phiGuiXeDtos);

    }
    private boolean isAnyFieldEmpty() {
        // Ki·ªÉm tra c√°c tr∆∞·ªùng ComboBox c√≥ gi√° tr·ªã kh√¥ng
        if (comboBoxLoaiKhoanThu.getValue() == null ||
                comboBoxDonViTinh.getValue() == null ||
                comboBoxPhamVi.getValue() == null ||
                comboBoxBoPhanQuanLy.getValue() == null) {
            return true;
        }

        // Ki·ªÉm tra c√°c TextField c√≥ gi√° tr·ªã kh√¥ng
        if (textFieldTenKhoanThu.getText().isEmpty() ||
                textFieldDonGia.getText().isEmpty()) {
            return true;
        }

        // Ki·ªÉm tra DatePicker c√≥ gi√° tr·ªã kh√¥ng
        if (datePickerHanNop.getValue() == null) {
            return true;
        }

        // Ki·ªÉm tra n·∫øu gi√° tr·ªã xe ƒë·∫°p, xe m√°y, v√† √¥ t√¥ c√≥ b·ªã tr·ªëng kh√¥ng n·∫øu b·∫°n mu·ªën ki·ªÉm tra ch√∫ng
        if ("Ph∆∞∆°ng ti·ªán".equals(comboBoxDonViTinh.getValue())) {
            if (textFieldGiaXeDap.getText().isEmpty() ||
                    textFieldGiaXeMay.getText().isEmpty() ||
                    textFieldGiaXeOTo.getText().isEmpty()) {
                return true;
            }
        }

        return false; // T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu c√≥ gi√° tr·ªã
    }
    
    @FXML
    private void handleClose(ActionEvent event) {
        try {
            javafx.stage.Stage stage = (javafx.stage.Stage) button_close_up.getScene().getWindow();
            stage.close();
        } catch (Exception e) {
            System.err.println("L·ªói khi ƒë√≥ng c·ª≠a s·ªï: " + e.getMessage());
        }
    }
    
    /**
     * Refresh kho·∫£n thu table in Home_list controller
     */
    private void refreshKhoanThuTable() {
        try {
            System.out.println("üîÑ Refreshing fee table...");
            
            javafx.application.Platform.runLater(() -> {
                try {
                    // Find all windows and look for Home_list controller
                    for (javafx.stage.Window window : javafx.stage.Window.getWindows()) {
                        if (window instanceof javafx.stage.Stage) {
                            javafx.stage.Stage stage = (javafx.stage.Stage) window;
                            javafx.scene.Scene scene = stage.getScene();
                            if (scene != null && scene.getRoot() != null) {
                                // Try to find the Home_list controller through scene graph
                                findAndRefreshKhoanThuController(scene.getRoot());
                            }
                        }
                    }
                } catch (Exception e) {
                    System.err.println("ERROR: Failed to refresh fee data: " + e.getMessage());
                    e.printStackTrace();
                }
            });
        } catch (Exception e) {
            System.err.println("ERROR: Exception in refreshKhoanThuTable: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Find and refresh Home_list controller for fees
     */
    private void findAndRefreshKhoanThuController(javafx.scene.Node node) {
        try {
            // Check if the node has a controller property
            Object controller = node.getProperties().get("controller");
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeListController = (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                
                // Switch to fees tab
                java.lang.reflect.Method gotoKhoanThuMethod = homeListController.getClass().getDeclaredMethod("gotoKhoanThu", javafx.event.ActionEvent.class);
                gotoKhoanThuMethod.setAccessible(true);
                gotoKhoanThuMethod.invoke(homeListController, (javafx.event.ActionEvent) null);
                
                // Refresh fee data (now public method)
                homeListController.refreshKhoanThuData();
                
                System.out.println("‚úÖ Fee data refreshed successfully");
                return;
            }
            
            // Recursively search in children if it's a Parent node
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    findAndRefreshKhoanThuController(child);
                }
            }
        } catch (Exception e) {
            // Silently continue searching - this is expected for most nodes
        }
    }

    private boolean hasPermission() {
        try {
            if (Session.getCurrentUser() == null) return false;
            
            // S·ª≠ d·ª•ng reflection ƒë·ªÉ l·∫•y vaiTro do v·∫•n ƒë·ªÅ Lombok
            java.lang.reflect.Field vaiTroField = Session.getCurrentUser().getClass().getDeclaredField("vaiTro");
            vaiTroField.setAccessible(true);
            String vaiTro = (String) vaiTroField.get(Session.getCurrentUser());
            
            // Ch·ªâ K·∫ø to√°n m·ªõi c√≥ quy·ªÅn th√™m kho·∫£n thu
            return "K·∫ø to√°n".equals(vaiTro);
        } catch (Exception e) {
            System.err.println("L·ªói khi ki·ªÉm tra quy·ªÅn: " + e.getMessage());
            return false;
        }
    }
}
