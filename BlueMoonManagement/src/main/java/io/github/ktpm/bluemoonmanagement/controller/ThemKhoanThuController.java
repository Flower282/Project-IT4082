package io.github.ktpm.bluemoonmanagement.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
import io.github.ktpm.bluemoonmanagement.model.dto.ResponseDto;
import io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto;
import io.github.ktpm.bluemoonmanagement.model.dto.phiGuiXe.PhiGuiXeDto;
import io.github.ktpm.bluemoonmanagement.model.dto.taiKhoan.ThongTinTaiKhoanDto;
import io.github.ktpm.bluemoonmanagement.service.khoanThu.KhoanThuService;
import io.github.ktpm.bluemoonmanagement.session.Session;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

@Component
public class ThemKhoanThuController {

    @FXML
    private FontAwesomeIcon buttonClose;

    @FXML
    private Button buttonThemKhoanThu;

    @FXML
    private Button buttonChinhSua;

    @FXML
    private Button buttonLuu;

    @FXML
    private Button buttonTaoHoaDon;

    @FXML
    private Button button_close_up;

    @FXML
    private Button buttonThemFile;



    @FXML
    private ComboBox<String> comboBoxDonViTinh;

    @FXML
    private ComboBox<String> comboBoxLoaiKhoanThu;

    @FXML
    private ComboBox<String> comboBoxPhamVi;

    @FXML
    private ComboBox<String> comboBoxBoPhanQuanLy;

    @FXML
    private DatePicker datePickerHanNop;

    @FXML
    private HBox text;

    @FXML
    private HBox text11;

    @FXML
    private HBox phuongTienHbox;

    @FXML
    private HBox hBoxDonGia;

    @FXML
    private HBox hBoxDonGiaPhuongTien;

    @FXML
    private VBox vBoxTenCoQuan;

    @FXML
    private VBox vBoxDonViTinhVaDonGia;

    @FXML
    private javafx.scene.control.Label labelTieuDe;

    @FXML
    private Text textError;

    @FXML
    private TextField textFieldDonGia;

    @FXML
    private TextField textFieldGiaXeDap;

    @FXML
    private TextField textFieldGiaXeMay;

    @FXML
    private TextField textFieldGiaXeOTo;

    @FXML
    private TextField textFieldTenCoQuan;

    @FXML
    private TextField textFieldTenKhoanThu;


    @Autowired
    private KhoanThuService khoanThuService;
    
    @Autowired
    private org.springframework.context.ApplicationContext applicationContext;
    
    @Autowired
    private io.github.ktpm.bluemoonmanagement.service.hoaDon.HoaDonService hoaDonService;

    // Fields for edit mode
    private boolean isEditMode = false;
    private String originalMaKhoanThu;
    private KhoanThuDto currentKhoanThu;

    public void initialize() {
        // QUAN TR·ªåNG: Reset tr·∫°ng th√°i form v·ªÅ ch·∫ø ƒë·ªô th√™m m·ªõi
        isEditMode = false;
        originalMaKhoanThu = null;
        currentKhoanThu = null;
        
        // Kh·ªüi t·∫°o c√°c ComboBox v·ªõi d·ªØ li·ªáu m·∫´u
        comboBoxLoaiKhoanThu.getItems().addAll("B·∫Øt bu·ªôc", "T·ª± nguy·ªán");
        comboBoxLoaiKhoanThu.setValue("B·∫Øt bu·ªôc"); // M·∫∑c ƒë·ªãnh ch·ªçn "B·∫Øt bu·ªôc"
        
        comboBoxDonViTinh.getItems().addAll("Di·ªán t√≠ch", "CƒÉn h·ªô", "Ph∆∞∆°ng ti·ªán");
        
        comboBoxPhamVi.getItems().addAll(
            "T·∫•t c·∫£", 
            "CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng"
        );
        comboBoxPhamVi.setValue("CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng"); // M·∫∑c ƒë·ªãnh ch·ªçn ph·ªï bi·∫øn nh·∫•t
        
        comboBoxBoPhanQuanLy.getItems().addAll("Ban qu·∫£n l√Ω", "B√™n th·ª© 3");
        comboBoxBoPhanQuanLy.setValue("Ban qu·∫£n l√Ω"); // M·∫∑c ƒë·ªãnh ch·ªçn "Ban qu·∫£n l√Ω"

        // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa comboBoxDonViTinh ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã
        comboBoxDonViTinh.setOnAction(this::onDonViTinhChanged);

        // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa comboBoxBoPhanQuanLy ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªùng t√™n c∆° quan
        comboBoxBoPhanQuanLy.setOnAction(this::onBoPhanQuanLyChanged);

        // Enable tr∆∞·ªùng ƒë∆°n gi√° ban ƒë·∫ßu
        if (hBoxDonGia != null) {
            hBoxDonGia.setDisable(false);
        }
        if (textFieldDonGia != null) {
            textFieldDonGia.setDisable(false);
        }
        
        // Debug: Check if vehicle fields are initialized
        System.out.println("DEBUG INIT: textFieldGiaXeDap null? " + (textFieldGiaXeDap == null));
        System.out.println("DEBUG INIT: textFieldGiaXeMay null? " + (textFieldGiaXeMay == null));
        System.out.println("DEBUG INIT: textFieldGiaXeOTo null? " + (textFieldGiaXeOTo == null));
        System.out.println("DEBUG INIT: hBoxDonGiaPhuongTien null? " + (hBoxDonGiaPhuongTien == null));

        // Thi·∫øt l·∫≠p format ti·ªÅn cho c√°c text field
        setupMoneyFormatting();

        // G·ªçi h√†m x·ª≠ l√Ω ban ƒë·∫ßu
        onDonViTinhChanged(null); // Ki·ªÉm tra ngay khi b·∫Øt ƒë·∫ßu
        onBoPhanQuanLyChanged(null); // Ki·ªÉm tra b·ªô ph·∫≠n qu·∫£n l√Ω
        
        // Setup close button
        if (button_close_up != null) {
            button_close_up.setOnAction(this::handleClose);
        }
        
        // ·∫®n n√∫t "T·∫°o h√≥a ƒë∆°n" ban ƒë·∫ßu (ch·ªâ hi·ªán trong ch·∫ø ƒë·ªô edit)
        if (buttonTaoHoaDon != null) {
            buttonTaoHoaDon.setVisible(false);
        }
        
        // Thi·∫øt l·∫≠p n√∫t cho ch·∫ø ƒë·ªô ADD
        setupButtonsForAddMode();
    }
    
    /**
     * Thi·∫øt l·∫≠p n√∫t cho ch·∫ø ƒë·ªô ADD (th√™m m·ªõi)
     */
    private void setupButtonsForAddMode() {
        // Hi·ªÉn th·ªã n√∫t "Th√™m kho·∫£n thu"
        if (buttonThemKhoanThu != null) {
            buttonThemKhoanThu.setVisible(true);
        }
        
        // ·∫®n c√°c n√∫t c·ªßa ch·∫ø ƒë·ªô EDIT
        if (buttonChinhSua != null) {
            buttonChinhSua.setVisible(false);
        }
        if (buttonLuu != null) {
            buttonLuu.setVisible(false);
        }
        if (buttonTaoHoaDon != null) {
            buttonTaoHoaDon.setVisible(false);
        }
        
        // Reset text error
        if (textError != null) {
            textError.setText("");
        }
        
        // ƒê·∫∑t ti√™u ƒë·ªÅ form
        if (labelTieuDe != null) {
            labelTieuDe.setText("Th√™m kho·∫£n thu m·ªõi");
        }
        
        System.out.println("‚úÖ Form set to ADD mode - showing 'Th√™m kho·∫£n thu' button, hiding edit buttons");
    }
    
    @FXML
    private void onDonViTinhChanged(ActionEvent event) {
        System.out.println("DEBUG: onDonViTinhChanged - Selected: " + comboBoxDonViTinh.getValue());
        
        // Ki·ªÉm tra n·∫øu "Ph∆∞∆°ng ti·ªán" ƒë∆∞·ª£c ch·ªçn
        if ("Ph∆∞∆°ng ti·ªán".equals(comboBoxDonViTinh.getValue())) {
            System.out.println("DEBUG: Switching to vehicle mode - showing vehicle price fields");
            
            // ·∫®n tr∆∞·ªùng ƒë∆°n gi√° chung
            if (hBoxDonGia != null) {
                hBoxDonGia.setVisible(false);
                hBoxDonGia.setDisable(true);
                System.out.println("DEBUG: ‚úÖ hBoxDonGia hidden");
            }
            if (textFieldDonGia != null) {
                textFieldDonGia.setDisable(true);
                textFieldDonGia.clear();
                System.out.println("DEBUG: ‚úÖ textFieldDonGia disabled and cleared");
            }
            
            // HI·ªÇN TH·ªä v√† enable c√°c √¥ gi√° xe
            if (hBoxDonGiaPhuongTien != null) {
                hBoxDonGiaPhuongTien.setVisible(true);
                hBoxDonGiaPhuongTien.setDisable(false);
                System.out.println("DEBUG: ‚úÖ hBoxDonGiaPhuongTien shown and enabled");
            }
            
            // Enable v√† hi·ªÉn th·ªã t·∫•t c·∫£ √¥ gi√° xe 
            if (textFieldGiaXeDap != null) {
                textFieldGiaXeDap.setDisable(false);
            textFieldGiaXeDap.setVisible(true);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeDap enabled and visible");
            }
            if (textFieldGiaXeMay != null) {
                textFieldGiaXeMay.setDisable(false);
            textFieldGiaXeMay.setVisible(true);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeMay enabled and visible");
            }
            if (textFieldGiaXeOTo != null) {
                textFieldGiaXeOTo.setDisable(false);
            textFieldGiaXeOTo.setVisible(true);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeOTo enabled and visible");
            }
            
            System.out.println("DEBUG: üöó Vehicle mode activated - vehicle price fields are now visible");
        } else {
            System.out.println("DEBUG: Switching to non-vehicle mode - showing general price field");
            
            // Hi·ªÉn th·ªã v√† enable tr∆∞·ªùng ƒë∆°n gi√° chung
            if (hBoxDonGia != null) {
                hBoxDonGia.setVisible(true);
                hBoxDonGia.setDisable(false);
                System.out.println("DEBUG: ‚úÖ hBoxDonGia shown and enabled");
            }
            if (textFieldDonGia != null) {
                textFieldDonGia.setDisable(false);
                System.out.println("DEBUG: ‚úÖ textFieldDonGia ENABLED for input");
            }
            
            // ·∫®n v√† disable container ph∆∞∆°ng ti·ªán
            if (hBoxDonGiaPhuongTien != null) {
                hBoxDonGiaPhuongTien.setVisible(false);
                hBoxDonGiaPhuongTien.setDisable(true);
                System.out.println("DEBUG: ‚úÖ hBoxDonGiaPhuongTien container hidden");
            }
            
            // DISABLE t·∫•t c·∫£ c√°c √¥ gi√° xe v√† clear gi√° tr·ªã
            if (textFieldGiaXeDap != null) {
                textFieldGiaXeDap.setDisable(true);
                textFieldGiaXeDap.clear();
            textFieldGiaXeDap.setVisible(false);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeDap disabled and hidden");
            }
            if (textFieldGiaXeMay != null) {
                textFieldGiaXeMay.setDisable(true);
                textFieldGiaXeMay.clear();
            textFieldGiaXeMay.setVisible(false);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeMay disabled and hidden");
            }
            if (textFieldGiaXeOTo != null) {
                textFieldGiaXeOTo.setDisable(true);
                textFieldGiaXeOTo.clear();
            textFieldGiaXeOTo.setVisible(false);
                System.out.println("DEBUG: ‚úÖ textFieldGiaXeOTo disabled and hidden");
            }
            
            System.out.println("DEBUG: üí∞ General price mode activated - only general price field is enabled");
        }
    }

    @FXML
    private void onBoPhanQuanLyChanged(ActionEvent event) {
        System.out.println("DEBUG: onBoPhanQuanLyChanged - Selected: " + comboBoxBoPhanQuanLy.getValue());
        
        // Ki·ªÉm tra n·∫øu "B√™n th·ª© 3" ƒë∆∞·ª£c ch·ªçn
        if ("B√™n th·ª© 3".equals(comboBoxBoPhanQuanLy.getValue())) {
            System.out.println("DEBUG: Switching to 3rd party mode - showing import excel controls");
            
            // HI·ªÇN TH·ªä vBoxTenCoQuan ƒë·ªÉ c√≥ th·ªÉ nh·∫≠p excel h√≥a ƒë∆°n
            if (vBoxTenCoQuan != null) {
                vBoxTenCoQuan.setVisible(true);
                vBoxTenCoQuan.setDisable(false);
                System.out.println("DEBUG: vBoxTenCoQuan shown and enabled (for excel import)");
            }
            
            // ·∫®n v√† disable ph·∫ßn ƒë∆°n v·ªã t√≠nh v√† ƒë∆°n gi√° (c√°c n√∫t c·ªßa Ban qu·∫£n l√Ω)
            if (vBoxDonViTinhVaDonGia != null) {
                vBoxDonViTinhVaDonGia.setVisible(false);
                vBoxDonViTinhVaDonGia.setDisable(true);
                System.out.println("DEBUG: vBoxDonViTinhVaDonGia hidden and disabled (Ban qu·∫£n l√Ω controls)");
            }
            
            // Clear v√† disable c√°c combobox c·ªßa Ban qu·∫£n l√Ω
            if (comboBoxDonViTinh != null) {
                comboBoxDonViTinh.setValue(null);
                comboBoxDonViTinh.setDisable(true);
                System.out.println("DEBUG: comboBoxDonViTinh cleared and disabled");
            }
            
        } else {
            System.out.println("DEBUG: Switching to Ban qu·∫£n l√Ω mode - enabling controls");
            
            // ·∫®N vBoxTenCoQuan v√¨ kh√¥ng c·∫ßn nh·∫≠p excel cho Ban qu·∫£n l√Ω
            if (vBoxTenCoQuan != null) {
                vBoxTenCoQuan.setVisible(false);
                vBoxTenCoQuan.setDisable(true);
                System.out.println("DEBUG: vBoxTenCoQuan hidden (not needed for Ban qu·∫£n l√Ω)");
            }
            
            // Hi·ªÉn th·ªã v√† enable l·∫°i ph·∫ßn ƒë∆°n v·ªã t√≠nh v√† ƒë∆°n gi√°
            if (vBoxDonViTinhVaDonGia != null) {
                vBoxDonViTinhVaDonGia.setVisible(true);
                vBoxDonViTinhVaDonGia.setDisable(false);
                System.out.println("DEBUG: vBoxDonViTinhVaDonGia shown and enabled");
            }
            
            // Enable l·∫°i combobox ƒë∆°n v·ªã t√≠nh
            if (comboBoxDonViTinh != null) {
                comboBoxDonViTinh.setDisable(false);
                System.out.println("DEBUG: comboBoxDonViTinh enabled");
            }
            
            // ƒê·∫£m b·∫£o tr∆∞·ªùng ƒë∆°n gi√° ƒë∆∞·ª£c enable khi quay l·∫°i ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng
            if (hBoxDonGia != null) {
                hBoxDonGia.setDisable(false);
                System.out.println("DEBUG: hBoxDonGia enabled");
            }
            if (textFieldDonGia != null) {
                textFieldDonGia.setDisable(false);
                System.out.println("DEBUG: textFieldDonGia enabled");
            }
            
            // Trigger l·∫°i logic ƒë∆°n v·ªã t√≠nh ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng tr∆∞·ªùng ƒë∆°n gi√°
            onDonViTinhChanged(null);
        }
        
        // C·∫≠p nh·∫≠t visibility c·ªßa c√°c button invoice sau khi thay ƒë·ªïi b·ªô ph·∫≠n qu·∫£n l√Ω
        if (isEditMode && currentKhoanThu != null) {
            // C·∫≠p nh·∫≠t th√¥ng tin ghiChu ƒë·ªÉ reflect thay ƒë·ªïi b·ªô ph·∫≠n qu·∫£n l√Ω
            currentKhoanThu.setGhiChu(comboBoxBoPhanQuanLy.getValue().toString());
            
            // C·∫≠p nh·∫≠t button visibility based on new selection
            updateInvoiceButtonsVisibility();
        }
    }
    @FXML
    void ThemKhoanThuClicked(ActionEvent event) {
        // DEBUG: Ki·ªÉm tra tr·∫°ng th√°i form
        System.out.println("=== DEBUG: ThemKhoanThuClicked() called ===");
        System.out.println("DEBUG: isEditMode = " + isEditMode);
        System.out.println("DEBUG: originalMaKhoanThu = " + originalMaKhoanThu);
        System.out.println("DEBUG: currentKhoanThu = " + (currentKhoanThu != null ? "NOT NULL" : "NULL"));
        
        // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán
        if (!hasPermission()) {
            String action = isEditMode ? "ch·ªânh s·ª≠a" : "th√™m";
            textError.setText("Ch·ªâ K·∫ø to√°n m·ªõi c√≥ quy·ªÅn " + action + " kho·∫£n thu.");
            textError.setStyle("-fx-fill: red;");
            return;
        }
        
        // N·∫øu ·ªü ch·∫ø ƒë·ªô edit, g·ªçi method c·∫≠p nh·∫≠t
        if (isEditMode) {
            System.out.println("DEBUG: In EDIT mode - calling handleUpdateKhoanThu()");
            handleUpdateKhoanThu();
            return;
        }

        System.out.println("DEBUG: In ADD mode - proceeding with add logic");
        
        if (isAnyFieldEmpty()) {
            textError.setText("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            textError.setStyle("-fx-fill: red;");
            return; // Ng·ª´ng x·ª≠ l√Ω n·∫øu c√≥ tr∆∞·ªùng tr·ªëng
        }
        // L·∫•y th√¥ng tin t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        String tenKhoanThu = textFieldTenKhoanThu.getText();  // T√™n kho·∫£n thu
        String loaiKhoanThu = comboBoxLoaiKhoanThu.getValue().toString();  // Lo·∫°i kho·∫£n thu
        String boPhanQuanLy = comboBoxBoPhanQuanLy.getValue().toString();  // B·ªô ph·∫≠n qu·∫£n l√Ω
        String thoiHanNop = datePickerHanNop.getValue().toString();  // Th·ªùi h·∫°n (ng√†y n·ªôp)
        String phamVi = comboBoxPhamVi.getValue().toString();  // Ph·∫°m vi
        
        // X·ª≠ l√Ω ƒë∆°n v·ªã t√≠nh v√† s·ªë ti·ªÅn t√πy theo b·ªô ph·∫≠n qu·∫£n l√Ω
        String donViTinh;
        int soTien;
        
        if ("B√™n th·ª© 3".equals(boPhanQuanLy)) {
            // N·∫øu l√† b√™n th·ª© 3, c√≥ th·ªÉ set gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c ƒë·ªÉ tr·ªëng
            donViTinh = "Theo h√≥a ƒë∆°n";
            soTien = 0; // ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√°c
        } else {
            donViTinh = comboBoxDonViTinh.getValue().toString();  // ƒê∆°n v·ªã t√≠nh
            
            // N·∫øu ƒë∆°n v·ªã t√≠nh l√† "Ph∆∞∆°ng ti·ªán", kh√¥ng c·∫ßn ƒë·ªçc t·ª´ textFieldDonGia
            if ("Ph∆∞∆°ng ti·ªán".equals(donViTinh)) {
                soTien = 0; // ƒê·ªÉ 0 v√¨ gi√° s·∫Ω ƒë∆∞·ª£c l∆∞u ri√™ng trong b·∫£ng phi_gui_xe
            } else {
                soTien = Integer.parseInt(textFieldDonGia.getText());  // S·ªë ti·ªÅn t·ª´ √¥ ƒë∆°n gi√° chung
            }
        }
        // L·∫•y s·ªë ti·ªÅn t·ª´ c√°c TextField
        String giaXeDap = textFieldGiaXeDap.getText();  // Gi√° xe ƒë·∫°p
        String giaXeMay = textFieldGiaXeMay.getText();  // Gi√° xe m√°y
        String giaXeOTo = textFieldGiaXeOTo.getText();  // Gi√° xe √¥ t√¥
        String donGia = textFieldDonGia.getText();  // ƒê∆°n gi√°

        // L·∫•y ng√†y t·∫°o (h√¥m nay)
        String ngayTao = java.time.LocalDate.now().toString();  // Ng√†y t·∫°o (h√¥m nay)

        KhoanThuDto khoanThuDto = new KhoanThuDto();
        khoanThuDto.setTenKhoanThu(tenKhoanThu);
        khoanThuDto.setBatBuoc("B·∫Øt bu·ªôc".equals(loaiKhoanThu));  // Ki·ªÉm tra lo·∫°i kho·∫£n thu
        khoanThuDto.setDonViTinh(donViTinh);
        khoanThuDto.setSoTien(soTien);
        khoanThuDto.setPhamVi(phamVi);
        khoanThuDto.setNgayTao(java.time.LocalDate.parse(ngayTao));
        khoanThuDto.setThoiHan(java.time.LocalDate.parse(thoiHanNop));
        // Ch·ªâ s·ª≠ d·ª•ng t√™n b·ªô ph·∫≠n qu·∫£n l√Ω (b·ªè t√™n c∆° quan)
        khoanThuDto.setGhiChu(boPhanQuanLy);

        // N·∫øu ƒë∆°n v·ªã t√≠nh l√† "Ph∆∞∆°ng ti·ªán", t·∫°o PhiGuiXeDto t·ª´ c√°c text field
        if ("Ph∆∞∆°ng ti·ªán".equals(donViTinh)) {
            System.out.println("DEBUG: üöó Vehicle mode - creating vehicle fee list from form");
            ArrayList<PhiGuiXeDto> phiGuiXeList = new ArrayList<>();
            
            // Th√™m xe ƒë·∫°p n·∫øu c√≥ gi√°
            if (!giaXeDap.trim().isEmpty()) {
                int price = Integer.parseInt(giaXeDap.trim());
                phiGuiXeList.add(new PhiGuiXeDto("Xe ƒë·∫°p", price, null)); // maKhoanThu s·∫Ω ƒë∆∞·ª£c set sau
                System.out.println("DEBUG: ‚úÖ Added Xe ƒë·∫°p: " + price + " VND");
            }
            
            // Th√™m xe m√°y n·∫øu c√≥ gi√°
            if (!giaXeMay.trim().isEmpty()) {
                int price = Integer.parseInt(giaXeMay.trim());
                phiGuiXeList.add(new PhiGuiXeDto("Xe m√°y", price, null)); // maKhoanThu s·∫Ω ƒë∆∞·ª£c set sau
                System.out.println("DEBUG: ‚úÖ Added Xe m√°y: " + price + " VND");
            }
            
            // Th√™m xe √¥ t√¥ n·∫øu c√≥ gi√°
            if (!giaXeOTo.trim().isEmpty()) {
                int price = Integer.parseInt(giaXeOTo.trim());
                phiGuiXeList.add(new PhiGuiXeDto("√î t√¥", price, null)); // maKhoanThu s·∫Ω ƒë∆∞·ª£c set sau
                System.out.println("DEBUG: ‚úÖ Added √î t√¥: " + price + " VND");
            }
            
            khoanThuDto.setPhiGuiXeList(phiGuiXeList);
            System.out.println("DEBUG: Created " + phiGuiXeList.size() + " vehicle fee entries");
        } else {
            System.out.println("DEBUG: üí∞ Non-vehicle mode - no vehicle details needed");
            khoanThuDto.setPhiGuiXeList(new ArrayList<>());
        }

        // G·ªçi service ƒë·ªÉ th√™m kho·∫£n thu
        ResponseDto response = khoanThuService.addKhoanThu(khoanThuDto);
        if (response.isSuccess()) {
            textError.setText("Th√™m kho·∫£n thu th√†nh c√¥ng!");
            textError.setStyle("-fx-fill: green;");

            // Refresh kho·∫£n thu table ngay l·∫≠p t·ª©c
            refreshKhoanThuTable();
            
            // Close window after successful addition v·ªõi delay ng·∫Øn h∆°n
            javafx.application.Platform.runLater(() -> {
                try {
                    Thread.sleep(1000); // Show success message for 1 second
                    handleClose(null);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    handleClose(null);
                }
            });

        } else {
            textError.setText("L·ªói: " + response.getMessage());
            textError.setStyle("-fx-fill: red;");
        }

    }
    
    /**
     * X·ª≠ l√Ω c·∫≠p nh·∫≠t kho·∫£n thu khi ·ªü ch·∫ø ƒë·ªô edit
     */
    private void handleUpdateKhoanThu() {
        // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n c√≥ s·∫µn
        if (!showConfirmationDialog()) {
            textError.setText("ƒê√£ h·ªßy ch·ªânh s·ª≠a kho·∫£n thu.");
            textError.setStyle("-fx-fill: orange;");
            return;
        }
        
        if (isAnyFieldEmpty()) {
            textError.setText("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            textError.setStyle("-fx-fill: red;");
            return;
        }
        
        try {
            // T·∫°o DTO v·ªõi th√¥ng tin m·ªõi  
            KhoanThuDto updatedDto = createKhoanThuDto();
            updatedDto.setMaKhoanThu(originalMaKhoanThu); // Gi·ªØ nguy√™n m√£ kho·∫£n thu
            
            // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t
            ResponseDto response = khoanThuService.updateKhoanThu(updatedDto);
            
            if (response.isSuccess()) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t kho·∫£n thu th√†nh c√¥ng!");
                
                // T·ª± ƒë·ªông refresh b·∫£ng v√† chuy·ªÉn v·ªÅ tab kho·∫£n thu
                refreshKhoanThuTableAndGoToTab();
                
                // Refresh cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ph√≠ g·ª≠i xe ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                refreshCacheAndVehicleFees();
                
                // ƒê√≥ng t·∫•t c·∫£ c√°c tab detail ƒëang m·ªü
                closeAllOpenDetailTabs();
                
                // ƒê√≥ng form hi·ªán t·∫°i
                handleClose(null);
                
            } else {
                textError.setText("L·ªói: " + response.getMessage());
                textError.setStyle("-fx-fill: red;");
            }
            
        } catch (Exception e) {
            textError.setText("L·ªói khi c·∫≠p nh·∫≠t: " + e.getMessage());
            textError.setStyle("-fx-fill: red;");
        }
    }
    
    /**
     * Hi·ªÉn th·ªã dialog x√°c nh·∫≠n c√≥ s·∫µn
     */
    private boolean showConfirmationDialog() {
        try {
            String content = "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·ªânh s·ª≠a kho·∫£n thu n√†y?\n" +
                           "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.";
            
            // S·ª≠ d·ª•ng ThongBaoController v·ªõi giao di·ªán xac_nhan.fxml
            return ThongBaoController.showConfirmation("X√°c nh·∫≠n ch·ªânh s·ª≠a", content);
            
        } catch (Exception e) {
            System.err.println("Error showing confirmation dialog: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean isAnyFieldEmpty() {
        System.out.println("=== DEBUG: VALIDATION CHECK START ===");
        
        // Ki·ªÉm tra t·ª´ng tr∆∞·ªùng m·ªôt c√°ch chi ti·∫øt
        System.out.println("DEBUG: LoaiKhoanThu: " + comboBoxLoaiKhoanThu.getValue() + " (null? " + (comboBoxLoaiKhoanThu.getValue() == null) + ")");
        System.out.println("DEBUG: PhamVi: " + comboBoxPhamVi.getValue() + " (null? " + (comboBoxPhamVi.getValue() == null) + ")");
        System.out.println("DEBUG: BoPhanQuanLy: " + comboBoxBoPhanQuanLy.getValue() + " (null? " + (comboBoxBoPhanQuanLy.getValue() == null) + ")");
        
        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc c∆° b·∫£n
        if (comboBoxLoaiKhoanThu.getValue() == null) {
            System.out.println("‚ùå MISSING: Lo·∫°i kho·∫£n thu");
            return true;
        }
        if (comboBoxPhamVi.getValue() == null) {
            System.out.println("‚ùå MISSING: Ph·∫°m vi");
            return true;
        }
        if (comboBoxBoPhanQuanLy.getValue() == null) {
            System.out.println("‚ùå MISSING: B·ªô ph·∫≠n qu·∫£n l√Ω");
            return true;
        }

        // Ki·ªÉm tra t√™n kho·∫£n thu
        String tenKhoanThu = textFieldTenKhoanThu.getText();
        System.out.println("DEBUG: TenKhoanThu: '" + tenKhoanThu + "' (empty? " + tenKhoanThu.isEmpty() + ", length: " + tenKhoanThu.length() + ")");
        if (tenKhoanThu.isEmpty()) {
            System.out.println("‚ùå MISSING: T√™n kho·∫£n thu");
            return true;
        }

        // Ki·ªÉm tra DatePicker c√≥ gi√° tr·ªã kh√¥ng
        System.out.println("DEBUG: HanNop: " + datePickerHanNop.getValue() + " (null? " + (datePickerHanNop.getValue() == null) + ")");
        if (datePickerHanNop.getValue() == null) {
            System.out.println("‚ùå MISSING: H·∫°n n·ªôp");
            return true;
        }

        // N·∫øu ch·ªçn "B√™n th·ª© 3" th√¨ kh√¥ng c·∫ßn ki·ªÉm tra g√¨ th√™m (b·ªè t√™n c∆° quan)
        if ("B√™n th·ª© 3".equals(comboBoxBoPhanQuanLy.getValue())) {
            System.out.println("DEBUG: Validating for 'B√™n th·ª© 3' mode - no additional validation needed");
            System.out.println("‚úÖ All fields valid for 'B√™n th·ª© 3' mode");
            return false;
        }

        // N·∫øu kh√¥ng ph·∫£i "B√™n th·ª© 3" th√¨ ki·ªÉm tra ƒë∆°n v·ªã t√≠nh v√† ƒë∆°n gi√°
        System.out.println("DEBUG: DonViTinh: " + comboBoxDonViTinh.getValue());
        if (comboBoxDonViTinh.getValue() == null) {
            System.out.println("DEBUG: Missing ƒë∆°n v·ªã t√≠nh");
            return true;
        }

        // Ki·ªÉm tra ƒë∆°n gi√° t√πy theo ƒë∆°n v·ªã t√≠nh
        if ("Ph∆∞∆°ng ti·ªán".equals(comboBoxDonViTinh.getValue())) {
            System.out.println("DEBUG: üöó Vehicle mode - validating vehicle prices");
            
            // Ki·ªÉm tra √≠t nh·∫•t 1 lo·∫°i xe ph·∫£i c√≥ gi√°
            String giaXeDap = textFieldGiaXeDap.getText().trim();
            String giaXeMay = textFieldGiaXeMay.getText().trim();
            String giaXeOTo = textFieldGiaXeOTo.getText().trim();
            
            System.out.println("DEBUG: Vehicle prices - Xe ƒë·∫°p: '" + giaXeDap + "', Xe m√°y: '" + giaXeMay + "', Xe √¥ t√¥: '" + giaXeOTo + "'");
            
            if (giaXeDap.isEmpty() && giaXeMay.isEmpty() && giaXeOTo.isEmpty()) {
                System.out.println("‚ùå MISSING: Ph·∫£i nh·∫≠p gi√° cho √≠t nh·∫•t m·ªôt lo·∫°i xe");
                return true;
            }
            
            // Ki·ªÉm tra format s·ªë cho c√°c gi√° xe ƒë∆∞·ª£c nh·∫≠p (s·ª≠ d·ª•ng method format ti·ªÅn)
            if (!giaXeDap.isEmpty()) {
                int value = getNumberFromFormattedMoney(giaXeDap);
                if (value <= 0) {
                    System.out.println("‚ùå INVALID: Gi√° xe ƒë·∫°p kh√¥ng h·ª£p l·ªá: " + giaXeDap);
                    return true;
                }
            }
            if (!giaXeMay.isEmpty()) {
                int value = getNumberFromFormattedMoney(giaXeMay);
                if (value <= 0) {
                    System.out.println("‚ùå INVALID: Gi√° xe m√°y kh√¥ng h·ª£p l·ªá: " + giaXeMay);
                    return true;
                }
            }
            if (!giaXeOTo.isEmpty()) {
                int value = getNumberFromFormattedMoney(giaXeOTo);
                if (value <= 0) {
                    System.out.println("‚ùå INVALID: Gi√° xe √¥ t√¥ kh√¥ng h·ª£p l·ªá: " + giaXeOTo);
                    return true;
                }
            }
            
            System.out.println("‚úÖ Vehicle prices validation passed");
        } else {
            // Ki·ªÉm tra ƒë∆°n gi√° chung
            if (textFieldDonGia.getText().isEmpty()) {
                System.out.println("‚ùå MISSING: ƒë∆°n gi√° - value: '" + textFieldDonGia.getText() + 
                                 "', disabled: " + textFieldDonGia.isDisabled() + 
                                 ", visible: " + textFieldDonGia.isVisible());
                return true;
            }
            
            // Ki·ªÉm tra format s·ªë cho ƒë∆°n gi√° chung (s·ª≠ d·ª•ng method format ti·ªÅn)
            int value = getNumberFromFormattedMoney(textFieldDonGia.getText());
            if (value <= 0) {
                System.out.println("‚ùå INVALID: ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá: " + textFieldDonGia.getText());
                return true;
            }
        }

        return false; // T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu c√≥ gi√° tr·ªã
    }
    
    @FXML
    private void handleClose(ActionEvent event) {
        try {
            javafx.stage.Stage stage = (javafx.stage.Stage) button_close_up.getScene().getWindow();
            stage.close();
        } catch (Exception e) {
            System.err.println("L·ªói khi ƒë√≥ng c·ª≠a s·ªï: " + e.getMessage());
        }
    }
    
    /**
     * M·ªü popup ƒë·ªÉ nh·∫≠p chi ti·∫øt gi√° t·ª´ng lo·∫°i xe
     */
    private void openVehicleDetailsPopup(String maKhoanThu, String tenKhoanThu) {
        try {
            System.out.println("DEBUG: üöó Creating vehicle details popup for: " + tenKhoanThu + " (ID: " + maKhoanThu + ")");
            
            // T·∫°o dialog popup
            javafx.scene.control.Dialog<java.util.List<PhiGuiXeDto>> dialog = new javafx.scene.control.Dialog<>();
            dialog.setTitle("Chi ti·∫øt ph√≠ g·ª≠i xe");
            dialog.setHeaderText("Nh·∫≠p gi√° t·ª´ng lo·∫°i xe cho kho·∫£n thu: " + tenKhoanThu);
            
            // T·∫°o layout cho popup
            javafx.scene.layout.VBox content = new javafx.scene.layout.VBox(10);
            content.setPadding(new javafx.geometry.Insets(20));
            
            // Label h∆∞·ªõng d·∫´n
            javafx.scene.control.Label label = new javafx.scene.control.Label(
                "Vui l√≤ng nh·∫≠p gi√° cho c√°c lo·∫°i xe (c√≥ th·ªÉ b·ªè tr·ªëng n·∫øu kh√¥ng c√≥):");
            label.setStyle("-fx-font-weight: bold;");
            
            // T·∫°o c√°c TextField cho t·ª´ng lo·∫°i xe
            javafx.scene.layout.HBox xeDapBox = new javafx.scene.layout.HBox(10);
            javafx.scene.control.Label xeDapLabel = new javafx.scene.control.Label("Xe ƒë·∫°p:");
            xeDapLabel.setPrefWidth(80);
            javafx.scene.control.TextField xeDapField = new javafx.scene.control.TextField();
            xeDapField.setPromptText("Nh·∫≠p gi√° xe ƒë·∫°p (VND)");
            xeDapBox.getChildren().addAll(xeDapLabel, xeDapField);
            
            javafx.scene.layout.HBox xeMayBox = new javafx.scene.layout.HBox(10);
            javafx.scene.control.Label xeMayLabel = new javafx.scene.control.Label("Xe m√°y:");
            xeMayLabel.setPrefWidth(80);
            javafx.scene.control.TextField xeMayField = new javafx.scene.control.TextField();
            xeMayField.setPromptText("Nh·∫≠p gi√° xe m√°y (VND)");
            xeMayBox.getChildren().addAll(xeMayLabel, xeMayField);
            
            javafx.scene.layout.HBox xeOToBox = new javafx.scene.layout.HBox(10);
            javafx.scene.control.Label xeOToLabel = new javafx.scene.control.Label("Xe √¥ t√¥:");
            xeOToLabel.setPrefWidth(80);
            javafx.scene.control.TextField xeOToField = new javafx.scene.control.TextField();
            xeOToField.setPromptText("Nh·∫≠p gi√° xe √¥ t√¥ (VND)");
            xeOToBox.getChildren().addAll(xeOToLabel, xeOToField);
            
            content.getChildren().addAll(label, xeDapBox, xeMayBox, xeOToBox);
            dialog.getDialogPane().setContent(content);
            
            // Th√™m buttons
            javafx.scene.control.ButtonType saveButtonType = new javafx.scene.control.ButtonType(
                "L∆∞u", javafx.scene.control.ButtonBar.ButtonData.OK_DONE);
            javafx.scene.control.ButtonType cancelButtonType = javafx.scene.control.ButtonType.CANCEL;
            dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, cancelButtonType);
            
            // X·ª≠ l√Ω k·∫øt qu·∫£
            dialog.setResultConverter(dialogButton -> {
                if (dialogButton == saveButtonType) {
                    java.util.List<PhiGuiXeDto> phiGuiXeList = new java.util.ArrayList<>();
                    
                    // Th√™m xe ƒë·∫°p n·∫øu c√≥ gi√°
                    if (!xeDapField.getText().isEmpty()) {
                        try {
                            int price = Integer.parseInt(xeDapField.getText());
                            phiGuiXeList.add(new PhiGuiXeDto("Xe ƒë·∫°p", price, maKhoanThu));
                        } catch (NumberFormatException e) {
                            System.err.println("Gi√° xe ƒë·∫°p kh√¥ng h·ª£p l·ªá: " + xeDapField.getText());
                        }
                    }
                    
                    // Th√™m xe m√°y n·∫øu c√≥ gi√°
                    if (!xeMayField.getText().isEmpty()) {
                        try {
                            int price = Integer.parseInt(xeMayField.getText());
                            phiGuiXeList.add(new PhiGuiXeDto("Xe m√°y", price, maKhoanThu));
                        } catch (NumberFormatException e) {
                            System.err.println("Gi√° xe m√°y kh√¥ng h·ª£p l·ªá: " + xeMayField.getText());
                        }
                    }
                    
                    // Th√™m xe √¥ t√¥ n·∫øu c√≥ gi√°
                    if (!xeOToField.getText().isEmpty()) {
                        try {
                            int price = Integer.parseInt(xeOToField.getText());
                            phiGuiXeList.add(new PhiGuiXeDto("√î t√¥", price, maKhoanThu));
                        } catch (NumberFormatException e) {
                            System.err.println("Gi√° xe √¥ t√¥ kh√¥ng h·ª£p l·ªá: " + xeOToField.getText());
                        }
                    }
                    
                    return phiGuiXeList;
                }
                return null;
            });
            
            // Hi·ªÉn th·ªã dialog v√† x·ª≠ l√Ω k·∫øt qu·∫£
            java.util.Optional<java.util.List<PhiGuiXeDto>> result = dialog.showAndWait();
            result.ifPresent(phiGuiXeList -> {
                if (!phiGuiXeList.isEmpty()) {
                    System.out.println("DEBUG: üíæ Saving " + phiGuiXeList.size() + " vehicle fee entries");
                    // ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ g·ªçi service ƒë·ªÉ l∆∞u danh s√°ch ph√≠ xe
                    // V√≠ d·ª•: phiGuiXeService.savePhiGuiXeList(phiGuiXeList);
                    
                    for (PhiGuiXeDto dto : phiGuiXeList) {
                        System.out.println("DEBUG: ‚úÖ " + dto.getLoaiXe() + ": " + dto.getSoTien() + " VND");
                    }
                } else {
                    System.out.println("DEBUG: ‚ö†Ô∏è No vehicle fees entered");
                }
                
                // ƒê√≥ng form ch√≠nh sau khi x·ª≠ l√Ω xong
                javafx.application.Platform.runLater(() -> {
                    try {
                        Thread.sleep(500);
                        handleClose(null);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        handleClose(null);
                    }
                });
            });
            
        } catch (Exception e) {
            System.err.println("L·ªói khi m·ªü popup chi ti·∫øt xe: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Refresh kho·∫£n thu table in Home_list controller
     */
    private void refreshKhoanThuTable() {
        try {
            System.out.println("üîÑ Refreshing fee table...");
            
            javafx.application.Platform.runLater(() -> {
                try {
                    // Find all windows and look for Home_list controller
                    for (javafx.stage.Window window : javafx.stage.Window.getWindows()) {
                        if (window instanceof javafx.stage.Stage) {
                            javafx.stage.Stage stage = (javafx.stage.Stage) window;
                            javafx.scene.Scene scene = stage.getScene();
                            if (scene != null && scene.getRoot() != null) {
                                // Try to find the Home_list controller through scene graph
                                findAndRefreshKhoanThuController(scene.getRoot());
                            }
                        }
                    }
                } catch (Exception e) {
                    System.err.println("ERROR: Failed to refresh fee data: " + e.getMessage());
                    e.printStackTrace();
                }
            });
        } catch (Exception e) {
            System.err.println("ERROR: Exception in refreshKhoanThuTable: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Find and refresh Home_list controller for fees
     */
    private void findAndRefreshKhoanThuController(javafx.scene.Node node) {
        try {
            // Check if the node has a controller property
            Object controller = node.getProperties().get("controller");
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeListController = (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                
                // Switch to fees tab
                java.lang.reflect.Method gotoKhoanThuMethod = homeListController.getClass().getDeclaredMethod("gotoKhoanThu", javafx.event.ActionEvent.class);
                gotoKhoanThuMethod.setAccessible(true);
                gotoKhoanThuMethod.invoke(homeListController, (javafx.event.ActionEvent) null);
                
                // Refresh fee data (now public method)
                homeListController.refreshKhoanThuData();
                
                System.out.println("‚úÖ Fee data refreshed successfully");
                return;
            }
            
            // Recursively search in children if it's a Parent node
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    findAndRefreshKhoanThuController(child);
                }
            }
        } catch (Exception e) {
            // Silently continue searching - this is expected for most nodes
        }
    }

    private boolean hasPermission() {
        try {
            ThongTinTaiKhoanDto currentUser = Session.getCurrentUser();
            if (currentUser == null) {
                return false;
            }
            String vaiTro = currentUser.getVaiTro();
            // Ch·ªâ K·∫ø to√°n m·ªõi ƒë∆∞·ª£c ph√©p th√™m/s·ª≠a kho·∫£n thu
            return "K·∫ø to√°n".equals(vaiTro);
        } catch (Exception e) {
            System.err.println("L·ªói khi ki·ªÉm tra quy·ªÅn: " + e.getMessage());
            return false;
        }
    }

    // Method to setup edit mode
    public void setupEditMode(io.github.ktpm.bluemoonmanagement.controller.Home_list.KhoanThuTableData khoanThuData) {
        isEditMode = true;
        originalMaKhoanThu = khoanThuData.getMaKhoanThu();
        
        // Load currentKhoanThu t·ª´ service ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
        if (khoanThuService != null) {
            try {
                List<KhoanThuDto> khoanThuList = khoanThuService.getAllKhoanThu();
                currentKhoanThu = khoanThuList.stream()
                    .filter(kt -> kt.getMaKhoanThu().equals(khoanThuData.getMaKhoanThu()))
                    .findFirst()
                    .orElse(null);
            } catch (Exception e) {
                System.err.println("Error loading KhoanThu data for edit mode: " + e.getMessage());
            }
        }
        
        // Chuy·ªÉn ƒë·ªïi UI ƒë·ªÉ hi·ªÉn th·ªã ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
        if (labelTieuDe != null) {
            labelTieuDe.setText("Chi ti·∫øt kho·∫£n thu");
        }
        
        // Thay ƒë·ªïi text button t·ª´ "Th√™m kho·∫£n thu" th√†nh "Ch·ªânh s·ª≠a"
        if (buttonThemKhoanThu != null) {
            buttonThemKhoanThu.setText("Ch·ªânh s·ª≠a");
        }
        
        // ·∫®n c√°c button kh√°c 
        if (buttonChinhSua != null) {
            buttonChinhSua.setVisible(false);
        }
        if (buttonLuu != null) {
            buttonLuu.setVisible(false);
        }
        
        // Hi·ªÉn th·ªã/·∫©n c√°c button d·ª±a tr√™n tr·∫°ng th√°i t·∫°o h√≥a ƒë∆°n v√† quy·ªÅn ng∆∞·ªùi d√πng
        updateInvoiceButtonsVisibility();
        
        // ƒêi·ªÅn d·ªØ li·ªáu v√†o form
        fillFormWithData(khoanThuData);
        
        // Enable t·∫•t c·∫£ fields ƒë·ªÉ ch·ªânh s·ª≠a, NGO·∫†I TR·ª™ ƒë∆°n v·ªã t√≠nh
        setFieldsEditable(true);
        
        // LU√îN LU√îN disable ƒë∆°n v·ªã t√≠nh trong ch·∫ø ƒë·ªô edit
        if (comboBoxDonViTinh != null) {
            comboBoxDonViTinh.setDisable(true);
        }
    }
    
    private void fillFormWithData(io.github.ktpm.bluemoonmanagement.controller.Home_list.KhoanThuTableData data) {
        if (textFieldTenKhoanThu != null) {
            textFieldTenKhoanThu.setText(data.getTenKhoanThu());
        }
        
        if (comboBoxLoaiKhoanThu != null) {
            comboBoxLoaiKhoanThu.setValue(data.getLoaiKhoanThu());
        }
        
        if (textFieldDonGia != null) {
            // Parse s·ªë ti·ªÅn t·ª´ chu·ªói c√≥ format v√† format l·∫°i
            String soTienText = data.getSoTien();
            if (soTienText != null && !soTienText.trim().isEmpty()) {
                // Lo·∫°i b·ªè ƒë·ªãnh d·∫°ng c≈© ƒë·ªÉ l·∫•y s·ªë
                String numbersOnly = soTienText.replaceAll("[^0-9]", "");
                if (!numbersOnly.isEmpty()) {
                    try {
                        int amount = Integer.parseInt(numbersOnly);
                                    textFieldDonGia.setText(String.valueOf(amount));
                    } catch (NumberFormatException e) {
                        textFieldDonGia.setText(soTienText); // Fallback to original
                    }
                } else {
                    textFieldDonGia.setText(soTienText);
                }
            }
        }
        
        if (comboBoxDonViTinh != null) {
            comboBoxDonViTinh.setValue(data.getDonViTinh());
        }
        
        if (comboBoxPhamVi != null) {
            comboBoxPhamVi.setValue(data.getPhamVi());
        }
        
        // Parse date if available
        if (datePickerHanNop != null && data.getThoiHan() != null && !data.getThoiHan().isEmpty()) {
            try {
                datePickerHanNop.setValue(java.time.LocalDate.parse(data.getThoiHan()));
            } catch (Exception e) {
                System.err.println("L·ªói parse ng√†y: " + e.getMessage());
            }
        }
        
        if (comboBoxBoPhanQuanLy != null) {
            // N·∫øu ghiChu kh√¥ng ph·∫£i l√† "Ban qu·∫£n l√Ω" ho·∫∑c "B√™n th·ª© 3", 
            // nghƒ©a l√† ƒë√¢y c√≥ th·ªÉ l√† t√™n c∆° quan c·ª• th·ªÉ
            String ghiChu = data.getGhiChu();
            if ("Ban qu·∫£n l√Ω".equals(ghiChu) || "B√™n th·ª© 3".equals(ghiChu)) {
                comboBoxBoPhanQuanLy.setValue(ghiChu);
            } else {
                // ƒê√¢y l√† t√™n c∆° quan, set b·ªô ph·∫≠n l√† "B√™n th·ª© 3" v√† ƒëi·ªÅn t√™n c∆° quan
                comboBoxBoPhanQuanLy.setValue("B√™n th·ª© 3");
                if (textFieldTenCoQuan != null) {
                    textFieldTenCoQuan.setText(ghiChu);
                }
            }
        }
        
        // Trigger s·ª± ki·ªán ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªùng t√™n c∆° quan n·∫øu c·∫ßn
        onBoPhanQuanLyChanged(null);
        
        // N·∫øu l√† lo·∫°i ph∆∞∆°ng ti·ªán, load v√† hi·ªÉn th·ªã gi√° c√°c lo·∫°i xe
        if ("Ph∆∞∆°ng ti·ªán".equals(data.getDonViTinh()) && khoanThuService != null) {
            System.out.println("DEBUG: Loading vehicle prices for fee: " + data.getMaKhoanThu());
            try {
                // L·∫•y chi ti·∫øt kho·∫£n thu t·ª´ service ƒë·ªÉ c√≥ th√¥ng tin ph√≠ xe
                List<io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto> khoanThuList = khoanThuService.getAllKhoanThu();
                io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto khoanThuDto = khoanThuList.stream()
                    .filter(kt -> kt.getMaKhoanThu().equals(data.getMaKhoanThu()))
                    .findFirst()
                    .orElse(null);
                    
                if (khoanThuDto != null && khoanThuDto.getPhiGuiXeList() != null && !khoanThuDto.getPhiGuiXeList().isEmpty()) {
                    System.out.println("DEBUG: Found " + khoanThuDto.getPhiGuiXeList().size() + " vehicle fees");
                    
                    // Clear existing values
                    if (textFieldGiaXeDap != null) textFieldGiaXeDap.clear();
                    if (textFieldGiaXeMay != null) textFieldGiaXeMay.clear();
                    if (textFieldGiaXeOTo != null) textFieldGiaXeOTo.clear();
                    
                    // ƒêi·ªÅn gi√° cho t·ª´ng lo·∫°i xe
                    for (io.github.ktpm.bluemoonmanagement.model.dto.phiGuiXe.PhiGuiXeDto phiXe : khoanThuDto.getPhiGuiXeList()) {
                        String loaiXe = phiXe.getLoaiXe();
                        String gia = String.valueOf(phiXe.getSoTien());
                        
                        System.out.println("DEBUG: Setting price for " + loaiXe + ": " + gia);
                        
                        if ("Xe ƒë·∫°p".equals(loaiXe) && textFieldGiaXeDap != null) {
                            textFieldGiaXeDap.setText(String.valueOf(phiXe.getSoTien()));
                        } else if ("Xe m√°y".equals(loaiXe) && textFieldGiaXeMay != null) {
                            textFieldGiaXeMay.setText(String.valueOf(phiXe.getSoTien()));
                        } else if ("√î t√¥".equals(loaiXe) && textFieldGiaXeOTo != null) {
                            textFieldGiaXeOTo.setText(String.valueOf(phiXe.getSoTien()));
                        }
                    }
                    
                    // Trigger s·ª± ki·ªán ƒë·ªÉ hi·ªÉn th·ªã c√°c field xe
                    onDonViTinhChanged(null);
                } else {
                    System.out.println("DEBUG: No vehicle fees found for this fee");
                }
            } catch (Exception e) {
                System.err.println("Error loading vehicle prices: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    
    private void setFieldsEditable(boolean editable) {
        if (textFieldTenKhoanThu != null) {
            textFieldTenKhoanThu.setDisable(!editable);
        }
        if (comboBoxLoaiKhoanThu != null) {
            comboBoxLoaiKhoanThu.setDisable(!editable);
        }
        if (textFieldDonGia != null) {
            textFieldDonGia.setDisable(!editable);
        }
        if (hBoxDonGia != null) {
            hBoxDonGia.setDisable(!editable);
        }
        if (comboBoxDonViTinh != null) {
            comboBoxDonViTinh.setDisable(!editable);
        }
        if (comboBoxPhamVi != null) {
            comboBoxPhamVi.setDisable(!editable);
        }
        if (comboBoxBoPhanQuanLy != null) {
            comboBoxBoPhanQuanLy.setDisable(!editable);
        }
        if (datePickerHanNop != null) {
            datePickerHanNop.setDisable(!editable);
        }
        if (textFieldGiaXeDap != null) {
            textFieldGiaXeDap.setDisable(!editable);
        }
        if (textFieldGiaXeMay != null) {
            textFieldGiaXeMay.setDisable(!editable);
        }
        if (textFieldGiaXeOTo != null) {
            textFieldGiaXeOTo.setDisable(!editable);
        }
        if (textFieldTenCoQuan != null) {
            textFieldTenCoQuan.setDisable(!editable);
        }
    }
    
    @FXML
    private void handleChinhSua(ActionEvent event) {
        // Ki·ªÉm tra quy·ªÅn
        if (!hasPermission()) {
            textError.setText("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kho·∫£n thu.");
            textError.setStyle("-fx-fill: red;");
            return;
        }
        
        // Enable t·∫•t c·∫£ fields ƒë·ªÉ ch·ªânh s·ª≠a
        setFieldsEditable(true);
        
        // ·∫®n button ch·ªânh s·ª≠a, hi·ªán button l∆∞u
        if (buttonChinhSua != null) {
            buttonChinhSua.setVisible(false);
        }
        if (buttonLuu != null) {
            buttonLuu.setVisible(true);
        }
        
        textError.setText("ƒêang trong ch·∫ø ƒë·ªô ch·ªânh s·ª≠a. Vui l√≤ng thay ƒë·ªïi th√¥ng tin v√† nh·∫•n L∆∞u.");
        textError.setStyle("-fx-fill: blue;");
    }
    
    @FXML
    private void handleLuu(ActionEvent event) {
        // Ki·ªÉm tra quy·ªÅn
        if (!hasPermission()) {
            textError.setText("B·∫°n kh√¥ng c√≥ quy·ªÅn l∆∞u thay ƒë·ªïi.");
            textError.setStyle("-fx-fill: red;");
            return;
        }
        
        if (isAnyFieldEmpty()) {
            textError.setText("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            textError.setStyle("-fx-fill: red;");
            return;
        }
        
        try {
            // T·∫°o DTO v·ªõi th√¥ng tin m·ªõi
            KhoanThuDto updatedDto = createKhoanThuDto();
            updatedDto.setMaKhoanThu(originalMaKhoanThu); // Gi·ªØ nguy√™n m√£ kho·∫£n thu
            
            // G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t
            ResponseDto response = khoanThuService.updateKhoanThu(updatedDto);
            
            if (response.isSuccess()) {
                textError.setText("C·∫≠p nh·∫≠t kho·∫£n thu th√†nh c√¥ng!");
                textError.setStyle("-fx-fill: green;");
                
                // Refresh table
                refreshKhoanThuTable();
                
                // Disable fields v√† chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô xem
                setFieldsEditable(false);
                if (buttonLuu != null) {
                    buttonLuu.setVisible(false);
                }
                if (buttonChinhSua != null) {
                    buttonChinhSua.setVisible(true);
                }
                
                // Close window after successful update v·ªõi delay ng·∫Øn h∆°n
                javafx.application.Platform.runLater(() -> {
                    try {
                        Thread.sleep(1000); // Show success message for 1 second
                        handleClose(null);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        handleClose(null);
                    }
                });
                
            } else {
                textError.setText("L·ªói: " + response.getMessage());
                textError.setStyle("-fx-fill: red;");
            }
            
        } catch (Exception e) {
            textError.setText("L·ªói khi c·∫≠p nh·∫≠t: " + e.getMessage());
            textError.setStyle("-fx-fill: red;");
        }
    }
    
    private KhoanThuDto createKhoanThuDto() {
        String tenKhoanThu = textFieldTenKhoanThu.getText();
        String loaiKhoanThu = comboBoxLoaiKhoanThu.getValue().toString();
        String boPhanQuanLy = comboBoxBoPhanQuanLy.getValue().toString();
        String thoiHanNop = datePickerHanNop.getValue().toString();
        String phamVi = comboBoxPhamVi.getValue().toString();
        
        // X·ª≠ l√Ω ƒë∆°n v·ªã t√≠nh v√† s·ªë ti·ªÅn t√πy theo b·ªô ph·∫≠n qu·∫£n l√Ω
        String donViTinh;
        int soTien;
        
        if ("B√™n th·ª© 3".equals(boPhanQuanLy)) {
            // N·∫øu l√† b√™n th·ª© 3, c√≥ th·ªÉ set gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c ƒë·ªÉ tr·ªëng
            donViTinh = "Theo h√≥a ƒë∆°n";
            soTien = 0; // ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√°c
        } else {
            donViTinh = comboBoxDonViTinh.getValue().toString();
            if ("Ph∆∞∆°ng ti·ªán".equals(donViTinh)) {
                soTien = 0; // For vehicle fees, individual prices are in PhiGuiXeList
            } else {
                soTien = getNumberFromFormattedMoney(textFieldDonGia.getText());
            }
        }
        
        KhoanThuDto khoanThuDto = new KhoanThuDto();
        khoanThuDto.setTenKhoanThu(tenKhoanThu);
        khoanThuDto.setBatBuoc("B·∫Øt bu·ªôc".equals(loaiKhoanThu));
        khoanThuDto.setDonViTinh(donViTinh);
        khoanThuDto.setSoTien(soTien);
        khoanThuDto.setPhamVi(phamVi);
        // Gi·ªØ nguy√™n ng√†y t·∫°o g·ªëc n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô edit
        if (isEditMode && currentKhoanThu != null && currentKhoanThu.getNgayTao() != null) {
            khoanThuDto.setNgayTao(currentKhoanThu.getNgayTao());
            System.out.println("DEBUG: Keeping original creation date: " + currentKhoanThu.getNgayTao());
        } else {
            khoanThuDto.setNgayTao(java.time.LocalDate.now());
            System.out.println("DEBUG: Setting new creation date: " + java.time.LocalDate.now());
        }
        khoanThuDto.setThoiHan(java.time.LocalDate.parse(thoiHanNop));
        // S·ª≠ d·ª•ng t√™n c∆° quan n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng b·ªô ph·∫≠n qu·∫£n l√Ω
        String ghiChu = boPhanQuanLy;
        if ("B√™n th·ª© 3".equals(boPhanQuanLy) && textFieldTenCoQuan != null && !textFieldTenCoQuan.getText().isEmpty()) {
            ghiChu = textFieldTenCoQuan.getText();
        }
        khoanThuDto.setGhiChu(ghiChu);
        
        // *** X·ª¨ L√ù GI√Å XE CHO PH∆Ø∆†NG TI·ªÜN ***
        if ("Ph∆∞∆°ng ti·ªán".equals(donViTinh)) {
            System.out.println("DEBUG: üöó Creating vehicle fees for update...");
            List<PhiGuiXeDto> phiGuiXeList = new ArrayList<>();
            
            // Th√™m gi√° xe ƒë·∫°p n·∫øu c√≥
            if (textFieldGiaXeDap != null && !textFieldGiaXeDap.getText().trim().isEmpty()) {
                int giaXeDap = getNumberFromFormattedMoney(textFieldGiaXeDap.getText());
                if (giaXeDap > 0) {
                    PhiGuiXeDto phiXeDap = new PhiGuiXeDto();
                    phiXeDap.setLoaiXe("Xe ƒë·∫°p");
                    phiXeDap.setSoTien(giaXeDap);
                    phiGuiXeList.add(phiXeDap);
                    System.out.println("DEBUG: Added bike price: " + String.format("%,d VNƒê", giaXeDap));
                }
            }
            
            // Th√™m gi√° xe m√°y n·∫øu c√≥
            if (textFieldGiaXeMay != null && !textFieldGiaXeMay.getText().trim().isEmpty()) {
                int giaXeMay = getNumberFromFormattedMoney(textFieldGiaXeMay.getText());
                if (giaXeMay > 0) {
                    PhiGuiXeDto phiXeMay = new PhiGuiXeDto();
                    phiXeMay.setLoaiXe("Xe m√°y");
                    phiXeMay.setSoTien(giaXeMay);
                    phiGuiXeList.add(phiXeMay);
                    System.out.println("DEBUG: Added motorcycle price: " + String.format("%,d VNƒê", giaXeMay));
                }
            }
            
            // Th√™m gi√° xe √¥ t√¥ n·∫øu c√≥
            if (textFieldGiaXeOTo != null && !textFieldGiaXeOTo.getText().trim().isEmpty()) {
                int giaXeOTo = getNumberFromFormattedMoney(textFieldGiaXeOTo.getText());
                if (giaXeOTo > 0) {
                    PhiGuiXeDto phiXeOTo = new PhiGuiXeDto();
                    phiXeOTo.setLoaiXe("√î t√¥");
                    phiXeOTo.setSoTien(giaXeOTo);
                    phiGuiXeList.add(phiXeOTo);
                    System.out.println("DEBUG: Added car price: " + String.format("%,d VNƒê", giaXeOTo));
                }
            }
            
            khoanThuDto.setPhiGuiXeList(phiGuiXeList);
            System.out.println("DEBUG: üí∞ Vehicle mode - created " + phiGuiXeList.size() + " vehicle fees");
        } else {
            System.out.println("DEBUG: üí∞ Non-vehicle mode - no vehicle details needed");
            khoanThuDto.setPhiGuiXeList(new ArrayList<>());
        }
        
        return khoanThuDto;
    }
    

    /**
     * Refresh b·∫£ng kho·∫£n thu v√† chuy·ªÉn v·ªÅ tab kho·∫£n thu
     */
    private void refreshKhoanThuTableAndGoToTab() {
        try {
            System.out.println("üîÑ Refreshing fee table and switching to KhoanThu tab...");
            
            // Find all windows and look for Home_list controller
            for (javafx.stage.Window window : javafx.stage.Window.getWindows()) {
                if (window instanceof javafx.stage.Stage) {
                    javafx.stage.Stage stage = (javafx.stage.Stage) window;
                    javafx.scene.Scene scene = stage.getScene();
                    if (scene != null && scene.getRoot() != null) {
                        // Try to find the Home_list controller through scene graph
                        findAndRefreshKhoanThuControllerForceTab(scene.getRoot());
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("ERROR: Failed to refresh fee data and switch tab: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Find and refresh Home_list controller for fees with forced tab switch
     */
    private void findAndRefreshKhoanThuControllerForceTab(javafx.scene.Node node) {
        try {
            // Check if the node has a controller property
            Object controller = node.getProperties().get("controller");
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeListController = (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                
                // Force switch to fees tab first
                java.lang.reflect.Method gotoKhoanThuMethod = homeListController.getClass().getDeclaredMethod("gotoKhoanThu", javafx.event.ActionEvent.class);
                gotoKhoanThuMethod.setAccessible(true);
                gotoKhoanThuMethod.invoke(homeListController, (javafx.event.ActionEvent) null);
                
                // Then refresh fee data 
                homeListController.refreshKhoanThuData();
                
                System.out.println("‚úÖ Fee data refreshed successfully and switched to KhoanThu tab");
                return;
            }
            
            // Recursively search in children if it's a Parent node
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    findAndRefreshKhoanThuControllerForceTab(child);
                }
            }
        } catch (Exception e) {
            // Silently continue searching - this is expected for most nodes
        }
    }
    
    /**
     * Refresh cache v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu ph√≠ g·ª≠i xe
     */
    private void refreshCacheAndVehicleFees() {
        try {
            System.out.println("üîÑ Refreshing cache and vehicle fees data...");
            
            javafx.application.Platform.runLater(() -> {
                try {
                    // Find all windows and refresh relevant components
                    for (javafx.stage.Window window : javafx.stage.Window.getWindows()) {
                        if (window instanceof javafx.stage.Stage) {
                            javafx.stage.Stage stage = (javafx.stage.Stage) window;
                            javafx.scene.Scene scene = stage.getScene();
                            if (scene != null && scene.getRoot() != null) {
                                // Try to find controllers and refresh cache
                                refreshCacheInScene(scene.getRoot());
                            }
                        }
                    }
                    
                    System.out.println("‚úÖ Cache and vehicle fees refreshed successfully");
                } catch (Exception e) {
                    System.err.println("ERROR: Failed to refresh cache and vehicle fees: " + e.getMessage());
                    e.printStackTrace();
                }
            });
        } catch (Exception e) {
            System.err.println("ERROR: Exception in refreshCacheAndVehicleFees: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * T√¨m v√† refresh cache trong scene graph
     */
    private void refreshCacheInScene(javafx.scene.Node node) {
        try {
            // Check if the node has a controller property
            Object controller = node.getProperties().get("controller");
            
            // Refresh cache for different controller types
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeListController = (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                // Home_list controller c√≥ th·ªÉ c√≥ cache service
                try {
                    java.lang.reflect.Field cacheField = homeListController.getClass().getDeclaredField("cacheDataService");
                    cacheField.setAccessible(true);
                    Object cacheService = cacheField.get(homeListController);
                    if (cacheService != null) {
                        java.lang.reflect.Method refreshMethod = cacheService.getClass().getMethod("refreshCacheData");
                        refreshMethod.invoke(cacheService);
                        System.out.println("‚úÖ Refreshed cache in Home_list controller");
                    }
                } catch (Exception e) {
                    // Silently continue - cache refresh is optional
                }
            }
            
            else if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.ChiTietCanHoController) {
                io.github.ktpm.bluemoonmanagement.controller.ChiTietCanHoController detailController = (io.github.ktpm.bluemoonmanagement.controller.ChiTietCanHoController) controller;
                // Refresh data in apartment detail windows
                try {
                    java.lang.reflect.Method refreshMethod = detailController.getClass().getDeclaredMethod("refreshData");
                    refreshMethod.setAccessible(true);
                    refreshMethod.invoke(detailController);
                    System.out.println("‚úÖ Refreshed data in ChiTietCanHoController");
                } catch (Exception e) {
                    // Silently continue - refresh is optional
                }
            }
            
            // Recursively search in children if it's a Parent node
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    refreshCacheInScene(child);
                }
            }
        } catch (Exception e) {
            // Silently continue searching - this is expected for most nodes
        }
    }
    
    /**
     * ƒê√≥ng t·∫•t c·∫£ c√°c tab detail ƒëang m·ªü (form ch·ªânh s·ª≠a, chi ti·∫øt cƒÉn h·ªô, etc.)
     */
    private void closeAllOpenDetailTabs() {
        try {
            System.out.println("üö™ Closing all open detail tabs...");
            
            // Get all open windows
            java.util.List<javafx.stage.Window> openWindows = new java.util.ArrayList<>(javafx.stage.Window.getWindows());
            
            for (javafx.stage.Window window : openWindows) {
                if (window instanceof javafx.stage.Stage) {
                    javafx.stage.Stage stage = (javafx.stage.Stage) window;
                    
                    // Skip the main window - only close detail/form windows
                    if (isDetailOrFormWindow(stage)) {
                        System.out.println("üö™ Closing detail window: " + stage.getTitle());
                        javafx.application.Platform.runLater(() -> {
                            try {
                                stage.close();
                            } catch (Exception e) {
                                System.err.println("Error closing window: " + e.getMessage());
                            }
                        });
                    }
                }
            }
            
            System.out.println("‚úÖ All detail tabs closed");
            
        } catch (Exception e) {
            System.err.println("ERROR: Failed to close detail tabs: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Ki·ªÉm tra xem window c√≥ ph·∫£i l√† detail/form window kh√¥ng
     */
    private boolean isDetailOrFormWindow(javafx.stage.Stage stage) {
        try {
            String title = stage.getTitle();
            if (title == null) return false;
            
            // ƒê√≥ng c√°c window c√≥ title ch·ª©a c√°c t·ª´ kh√≥a n√†y
            return title.contains("Chi ti·∫øt") || 
                   title.contains("Ch·ªânh s·ª≠a") || 
                   title.contains("Th√™m") ||
                   title.contains("X√°c nh·∫≠n") ||
                   title.contains("Detail") ||
                   title.contains("Edit") ||
                   title.contains("Add") ||
                   title.toLowerCase().contains("form");
                   
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Thi·∫øt l·∫≠p format ti·ªÅn cho c√°c text field
     */
    private void setupMoneyFormatting() {
        // Format cho ƒë∆°n gi√° chung
        if (textFieldDonGia != null) {
            setupMoneyFormattingForField(textFieldDonGia);
        }
        
        // Format cho gi√° xe ƒë·∫°p
        if (textFieldGiaXeDap != null) {
            setupMoneyFormattingForField(textFieldGiaXeDap);
        }
        
        // Format cho gi√° xe m√°y
        if (textFieldGiaXeMay != null) {
            setupMoneyFormattingForField(textFieldGiaXeMay);
        }
        
        // Format cho gi√° xe √¥ t√¥
        if (textFieldGiaXeOTo != null) {
            setupMoneyFormattingForField(textFieldGiaXeOTo);
        }
        
        System.out.println("‚úÖ Money formatting setup completed for all price fields");
    }
    
    /**
     * Thi·∫øt l·∫≠p format ti·ªÅn cho m·ªôt text field c·ª• th·ªÉ - ch·ªâ cho ph√©p s·ªë
     */
    private void setupMoneyFormattingForField(javafx.scene.control.TextField textField) {
        // Ch·ªâ cho ph√©p nh·∫≠p s·ªë
        textField.textProperty().addListener((observable, oldValue, newValue) -> {
            // Ch·ªâ gi·ªØ l·∫°i c√°c k√Ω t·ª± s·ªë
            if (!newValue.matches("\\d*")) {
                textField.setText(newValue.replaceAll("[^\\d]", ""));
            }
        });
    }
    
    /**
     * Format input khi ƒëang nh·∫≠p (real-time)
     */
    private String formatMoneyInput(String input) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }
        
        // Lo·∫°i b·ªè t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
        String numbersOnly = input.replaceAll("[^0-9]", "");
        
        if (numbersOnly.isEmpty()) {
            return "";
        }
        
        try {
            long number = Long.parseLong(numbersOnly);
            if (number == 0) {
                return "";
            }
            
            // Format v·ªõi d·∫•u ph·∫©y
            String formatted = String.format("%,d", number);
            return formatted + " VNƒê";
            
        } catch (NumberFormatException e) {
            return input; // Tr·∫£ v·ªÅ gi√° tr·ªã g·ªëc n·∫øu kh√¥ng format ƒë∆∞·ª£c
        }
    }
    
    /**
     * Format ho√†n ch·ªânh khi ho√†n th√†nh nh·∫≠p
     */
    private String formatMoneyComplete(String input) {
        if (input == null || input.trim().isEmpty()) {
            return "";
        }
        
        // Lo·∫°i b·ªè t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
        String numbersOnly = input.replaceAll("[^0-9]", "");
        
        if (numbersOnly.isEmpty()) {
            return "";
        }
        
        try {
            long number = Long.parseLong(numbersOnly);
            if (number == 0) {
                return "";
            }
            
            // Format v·ªõi d·∫•u ph·∫©y v√† VNƒê
            return String.format("%,d VNƒê", number);
            
        } catch (NumberFormatException e) {
            return input; // Tr·∫£ v·ªÅ gi√° tr·ªã g·ªëc n·∫øu kh√¥ng format ƒë∆∞·ª£c
        }
    }
    
    /**
     * Ki·ªÉm tra xem text ƒë√£ ƒë∆∞·ª£c format ch∆∞a
     */
    private boolean isFormattedMoney(String text) {
        if (text == null) return false;
        
        // Ki·ªÉm tra c√≥ k·∫øt th√∫c b·∫±ng " VNƒê" v√† c√≥ d·∫•u ph·∫©y
        return text.endsWith(" VNƒê") && text.contains(",");
    }
    
    /**
     * L·∫•y gi√° tr·ªã s·ªë t·ª´ text (ch·ªâ l√† s·ªë thu·∫ßn)
     */
    private int getNumberFromFormattedMoney(String text) {
        if (text == null || text.trim().isEmpty()) {
            return 0;
        }
        
        try {
            return Integer.parseInt(text.trim());
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán click n√∫t "T·∫°o h√≥a ƒë∆°n"
     */
    @FXML
    private void handleTaoHoaDon(ActionEvent event) {
        try {
            // Ki·ªÉm tra quy·ªÅn (ch·ªâ K·∫ø to√°n m·ªõi ƒë∆∞·ª£c t·∫°o h√≥a ƒë∆°n)
            if (!hasHoaDonPermission()) {
                showErrorDialog("L·ªói quy·ªÅn truy c·∫≠p", 
                    "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o h√≥a ƒë∆°n.\n" +
                    "Ch·ªâ ng∆∞·ªùi d√πng c√≥ vai tr√≤ 'K·∫ø to√°n' m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y.");
                return;
            }

            // Ki·ªÉm tra xem c√≥ ph·∫£i ch·∫ø ƒë·ªô edit kh√¥ng
            if (!isEditMode || currentKhoanThu == null) {
                showErrorDialog("L·ªói", "Ch·ªâ c√≥ th·ªÉ t·∫°o h√≥a ƒë∆°n t·ª´ kho·∫£n thu ƒë√£ t·ªìn t·∫°i.");
                return;
            }

            // T·∫°o h√≥a ƒë∆°n tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn x√°c nh·∫≠n
            try {
                if (hoaDonService != null) {
                    System.out.println("üßæ ƒêang t·∫°o h√≥a ƒë∆°n cho kho·∫£n thu: " + currentKhoanThu.getTenKhoanThu());
                    
                    // Ki·ªÉm tra tr·∫°ng th√°i t·∫°o h√≥a ƒë∆°n tr∆∞·ªõc khi g·ªçi service
                    if (currentKhoanThu.isTaoHoaDon()) {
                        showErrorDialog("‚ùå Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n", 
                            "H√≥a ƒë∆°n cho kho·∫£n thu '" + currentKhoanThu.getTenKhoanThu() + "' ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥.\n\n" +
                            "üí° L∆∞u √Ω: M·ªói kho·∫£n thu ch·ªâ c√≥ th·ªÉ t·∫°o h√≥a ƒë∆°n m·ªôt l·∫ßn ƒë·ªÉ tr√°nh tr√πng l·∫∑p.\n\n" +
                            "üîç B·∫°n c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i 'ƒê√£ t·∫°o' trong c·ªôt 'Tr·∫°ng th√°i h√≥a ƒë∆°n' \n" +
                            "c·ªßa b·∫£ng kho·∫£n thu ho·∫∑c xem danh s√°ch h√≥a ƒë∆°n trong trang 'L·ªãch s·ª≠ thu'.");
                        return;
                    }
                    
                    // G·ªçi service ƒë·ªÉ t·∫°o h√≥a ƒë∆°n (ch·ªâ cho kho·∫£n thu ch∆∞a t·∫°o)
                    io.github.ktpm.bluemoonmanagement.model.dto.ResponseDto response = 
                        hoaDonService.generateHoaDon(currentKhoanThu);
                    
                    if (response.isSuccess()) {
                        System.out.println("‚úÖ T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng!");
                        
                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i local c·ªßa kho·∫£n thu hi·ªán t·∫°i
                        if (currentKhoanThu != null) {
                            currentKhoanThu.setTaoHoaDon(true);
                        }
                        
                        // Refresh d·ªØ li·ªáu tr∆∞·ªõc khi hi·ªÉn th·ªã th√¥ng b√°o ƒë·ªÉ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
                        
                        // 1. Refresh invoice data in Home_list ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch h√≥a ƒë∆°n
                        refreshInvoiceDataInHomeList();
                        
                        // 2. Refresh fee data ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i "ƒê√£ t·∫°o h√≥a ƒë∆°n" trong b·∫£ng kho·∫£n thu
                        refreshKhoanThuTable();
                        
                        // 3. Refresh cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t to√†n b·ªô h·ªá th·ªëng
                        refreshCacheAndVehicleFees();
                        
                        // 4. C·∫≠p nh·∫≠t visibility c·ªßa c√°c button trong form hi·ªán t·∫°i
                        updateButtonVisibilityAfterInvoiceCreation();
                        
                        // 5. Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng sau khi ƒë√£ refresh
                        ThongBaoController.showSuccess("üéâ T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng!", 
                            " ƒê√£ t·∫°o h√≥a ƒë∆°n th√†nh c√¥ng cho kho·∫£n thu: " + currentKhoanThu.getTenKhoanThu() + "\n\n" +
                            " Tr·∫°ng th√°i kho·∫£n thu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh 'ƒê√£ t·∫°o'\n" +
                            " Ki·ªÉm tra tab 'L·ªãch s·ª≠ thu' ƒë·ªÉ xem h√≥a ƒë∆°n m·ªõi ƒë∆∞·ª£c t·∫°o");
                        
                        // 6. ƒê√≥ng form hi·ªán t·∫°i
                        javafx.stage.Stage currentStage = (javafx.stage.Stage) buttonTaoHoaDon.getScene().getWindow();
                        currentStage.close();
                        
                        // 6. Chuy·ªÉn sang tab L·ªãch s·ª≠ thu ƒë·ªÉ hi·ªÉn th·ªã h√≥a ƒë∆°n v·ª´a t·∫°o
                        javafx.application.Platform.runLater(() -> {
                            try {
                                refreshInvoiceDataAndGoToHistoryTab();
                                System.out.println("üîÑ Switched to 'L·ªãch s·ª≠ thu' tab to show new invoice");
                            } catch (Exception e) {
                                System.err.println("Could not switch to History tab: " + e.getMessage());
                            }
                        });
                    } else {
                        // T·∫°o h√≥a ƒë∆°n th·∫•t b·∫°i
                        String errorMessage = response.getMessage();
                        System.err.println("‚ùå T·∫°o h√≥a ƒë∆°n th·∫•t b·∫°i: " + errorMessage);
                        
                        showErrorDialog("Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n", 
                            "T·∫°o h√≥a ƒë∆°n th·∫•t b·∫°i:\n\n" + errorMessage + "\n\n" +
                            "C√°c l√Ω do c√≥ th·ªÉ:\n" +
                            "‚Ä¢ H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥\n" +
                            "‚Ä¢ ƒê√¢y l√† kho·∫£n thu t·ª± nguy·ªán\n" +
                            "‚Ä¢ Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n");
                    }
                } else {
                    showErrorDialog("L·ªói h·ªá th·ªëng", 
                        "D·ªãch v·ª• t·∫°o h√≥a ƒë∆°n kh√¥ng kh·∫£ d·ª•ng.\nVui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
                }
            } catch (Exception e) {
                System.err.println("‚ùå Exception khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage());
                e.printStackTrace();
                showErrorDialog("L·ªói t·∫°o h√≥a ƒë∆°n", 
                    "C√≥ l·ªói x·∫£y ra khi t·∫°o h√≥a ƒë∆°n:\n\n" + e.getMessage() + "\n\n" +
                    "Vui l√≤ng ki·ªÉm tra console ƒë·ªÉ bi·∫øt chi ti·∫øt.");
            }

        } catch (Exception e) {
            System.err.println("Error in handleTaoHoaDon: " + e.getMessage());
            e.printStackTrace();
            showErrorDialog("L·ªói", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }
    }

    /**
     * Ki·ªÉm tra quy·ªÅn t·∫°o h√≥a ƒë∆°n (ch·ªâ K·∫ø to√°n)
     */
    private boolean hasHoaDonPermission() {
        try {
            ThongTinTaiKhoanDto currentUser = Session.getCurrentUser();
            if (currentUser != null && currentUser.getVaiTro() != null) {
                return "K·∫ø to√°n".equals(currentUser.getVaiTro());
            }
            return false;
        } catch (Exception e) {
            System.err.println("Error checking invoice permission: " + e.getMessage());
            return false;
        }
    }



    /**
     * Hi·ªÉn th·ªã dialog th√†nh c√¥ng
     */
    private void showSuccessDialog(String title, String message) {
        ThongBaoController.showSuccess(title, message);
    }

    /**
     * Hi·ªÉn th·ªã dialog l·ªói
     */
    private void showErrorDialog(String title, String message) {
        ThongBaoController.showError(title, message);
    }
    
    /**
     * Refresh invoice data in Home_list and go to History tab after creating invoices
     */
    private void refreshInvoiceDataAndGoToHistoryTab() {
        try {
            // Find the Home_list controller through the scene graph
            javafx.scene.Node currentNode = buttonTaoHoaDon; // Use any FXML component as starting point
            while (currentNode != null) {
                javafx.scene.Scene scene = currentNode.getScene();
                if (scene != null) {
                    javafx.scene.Node rootNode = scene.getRoot();
                    findAndRefreshHomeListInvoiceDataAndGoToHistoryTab(rootNode);
                    System.out.println("üîÑ Attempted to refresh invoice data and switch to History tab in Home_list");
                    break;
                }
                if (currentNode.getParent() != null) {
                    currentNode = currentNode.getParent();
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("Could not refresh invoice data and switch tab in Home_list: " + e.getMessage());
            // Not critical error, just log it
        }
    }
    
    /**
     * Refresh invoice data in Home_list after creating invoices
     */
    private void refreshInvoiceDataInHomeList() {
        try {
            // Find the Home_list controller through the scene graph
            javafx.scene.Node currentNode = buttonTaoHoaDon; // Use any FXML component as starting point
            while (currentNode != null) {
                javafx.scene.Scene scene = currentNode.getScene();
                if (scene != null) {
                    javafx.scene.Node rootNode = scene.getRoot();
                    findAndRefreshHomeListInvoiceData(rootNode);
                    System.out.println("üîÑ Attempted to refresh invoice data in Home_list");
                    break;
                }
                if (currentNode.getParent() != null) {
                    currentNode = currentNode.getParent();
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("Could not refresh invoice data in Home_list: " + e.getMessage());
            // Not critical error, just log it
        }
    }
    
    /**
     * Recursively find Home_list controller and refresh invoice data then go to History tab
     */
    private void findAndRefreshHomeListInvoiceDataAndGoToHistoryTab(javafx.scene.Node node) {
        if (node == null) return;
        
        try {
            // Check if this node has a Home_list controller
            Object controller = null;
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                // Look for the controller in userData or properties
                controller = parent.getProperties().get("controller");
                if (controller == null) {
                    controller = parent.getUserData();
                }
            }
            
            // If found Home_list controller, call refresh method and switch to History tab
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeList = 
                    (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                    
                // Refresh invoice data
                homeList.refreshHoaDonData();
                System.out.println("‚úÖ Successfully refreshed invoice data in Home_list");
                
                // Switch to LichSuThu tab to show new invoices
                homeList.show("LichSuThu");
                System.out.println("üîÑ Switched to 'L·ªãch s·ª≠ thu' tab to display new invoices");
                return;
            }
            
            // Recursively search children
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    findAndRefreshHomeListInvoiceDataAndGoToHistoryTab(child);
                }
            }
            
        } catch (Exception e) {
            // Silently continue searching if error occurs
        }
    }
    
    /**
     * Recursively find Home_list controller and refresh invoice data
     */
    private void findAndRefreshHomeListInvoiceData(javafx.scene.Node node) {
        if (node == null) return;
        
        try {
            // Check if this node has a Home_list controller
            Object controller = null;
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                // Look for the controller in userData or properties
                controller = parent.getProperties().get("controller");
                if (controller == null) {
                    controller = parent.getUserData();
                }
            }
            
            // If found Home_list controller, call refresh method
            if (controller instanceof io.github.ktpm.bluemoonmanagement.controller.Home_list) {
                io.github.ktpm.bluemoonmanagement.controller.Home_list homeList = 
                    (io.github.ktpm.bluemoonmanagement.controller.Home_list) controller;
                homeList.refreshHoaDonData();
                System.out.println("‚úÖ Successfully refreshed invoice data in Home_list");
                return;
            }
            
            // Recursively search children
            if (node instanceof javafx.scene.Parent) {
                javafx.scene.Parent parent = (javafx.scene.Parent) node;
                for (javafx.scene.Node child : parent.getChildrenUnmodifiable()) {
                    findAndRefreshHomeListInvoiceData(child);
                }
            }
            
        } catch (Exception e) {
            // Silently continue searching if error occurs
        }
    }
    
    /**
     * Nh·∫≠p Excel h√≥a ƒë∆°n cho b√™n th·ª© 3
     */
    @FXML
    private void handleNhapExcelHoaDon(javafx.event.ActionEvent event) {
        try {
            if (hoaDonService != null) {
                // Ch·ªçn file Excel ƒë·ªÉ import
                javafx.stage.FileChooser fileChooser = new javafx.stage.FileChooser();
                fileChooser.setTitle("Ch·ªçn file Excel h√≥a ƒë∆°n");
                fileChooser.getExtensionFilters().add(
                    new javafx.stage.FileChooser.ExtensionFilter("Excel Files", "*.xlsx", "*.xls")
                );
                
                javafx.stage.Stage stage = (javafx.stage.Stage) buttonThemFile.getScene().getWindow();
                java.io.File selectedFile = fileChooser.showOpenDialog(stage);
                
                if (selectedFile != null) {
                    try {
                        // Convert File th√†nh MultipartFile
                        io.github.ktpm.bluemoonmanagement.util.FileMultipartUtil.FileMultipartFile multipartFile = 
                            new io.github.ktpm.bluemoonmanagement.util.FileMultipartUtil.FileMultipartFile(selectedFile);
                        
                        // G·ªçi service ƒë·ªÉ import h√≥a ƒë∆°n
                        io.github.ktpm.bluemoonmanagement.model.dto.ResponseDto response = 
                            hoaDonService.importFromExcel(multipartFile);
                        
                        if (response.isSuccess()) {
                            System.out.println("‚úÖ Excel import successful for: " + selectedFile.getName());
                            
                            // 1. Refresh d·ªØ li·ªáu h√≥a ƒë∆°n trong Home_list ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch h√≥a ƒë∆°n m·ªõi
                            refreshInvoiceDataInHomeList();
                            
                            // 2. Refresh b·∫£ng kho·∫£n thu ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i "ƒê√£ t·∫°o h√≥a ƒë∆°n"
                            refreshKhoanThuTable();
                            
                            // 3. Refresh cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t to√†n b·ªô h·ªá th·ªëng
                            refreshCacheAndVehicleFees();
                            
                            // 4. C·∫≠p nh·∫≠t UI form hi·ªán t·∫°i n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô edit v√† kho·∫£n thu hi·ªán t·∫°i ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                            if (isEditMode && currentKhoanThu != null) {
                                // Reload current KhoanThu ƒë·ªÉ l·∫•y tr·∫°ng th√°i m·ªõi nh·∫•t
                                try {
                                    currentKhoanThu.setTaoHoaDon(true); // C·∫≠p nh·∫≠t local state
                                    
                                    // ·∫®n n√∫t "Nh·∫≠p excel h√≥a ƒë∆°n" v√¨ ƒë√£ t·∫°o h√≥a ƒë∆°n
                                    if (buttonThemFile != null) {
                                        buttonThemFile.setVisible(false);
                                        System.out.println("üîÑ Hidden 'Nh·∫≠p excel h√≥a ƒë∆°n' button after successful import");
                                    }
                                    
                                    // Hi·ªÉn th·ªã n√∫t "T·∫°o h√≥a ƒë∆°n" n·∫øu user c√≥ quy·ªÅn (cho tr∆∞·ªùng h·ª£p ban qu·∫£n l√Ω)
                                    updateButtonVisibilityAfterInvoiceCreation();
                                    
                                } catch (Exception refreshEx) {
                                    System.err.println("Warning: Could not refresh current form state: " + refreshEx.getMessage());
                                }
                            }
                            
                            // 5. Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                            showSuccessDialog("üéâ Nh·∫≠p Excel th√†nh c√¥ng!", 
                                "‚úÖ ƒê√£ nh·∫≠p h√≥a ƒë∆°n t·ª´ " + selectedFile.getName() + " th√†nh c√¥ng!\n\n" + 
                                response.getMessage() + "\n\n" +
                                "üîÑ Tr·∫°ng th√°i kho·∫£n thu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh 'ƒê√£ t·∫°o'\n" +
                                "üí° Ki·ªÉm tra tab 'L·ªãch s·ª≠ thu' ƒë·ªÉ xem h√≥a ƒë∆°n m·ªõi ƒë∆∞·ª£c t·∫°o");
                            
                        } else {
                            showErrorDialog("‚ùå L·ªói nh·∫≠p Excel", "L·ªói: " + response.getMessage());
                        }
                    } catch (Exception ex) {
                        showErrorDialog("‚ùå L·ªói nh·∫≠p Excel", "Chi ti·∫øt: " + ex.getMessage());
                        ex.printStackTrace();
                    }
                }
            } else {
                showErrorDialog("‚ùå L·ªói", "Service h√≥a ƒë∆°n kh√¥ng kh·∫£ d·ª•ng");
            }
        } catch (Exception e) {
            showErrorDialog("‚ùå L·ªói nh·∫≠p Excel", "Chi ti·∫øt: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t visibility c·ªßa c√°c button d·ª±a tr√™n tr·∫°ng th√°i v√† quy·ªÅn ng∆∞·ªùi d√πng
     */
    private void updateInvoiceButtonsVisibility() {
        try {
            if (currentKhoanThu == null) {
                // N·∫øu kh√¥ng c√≥ kho·∫£n thu hi·ªán t·∫°i, ·∫©n t·∫•t c·∫£
                if (buttonTaoHoaDon != null) buttonTaoHoaDon.setVisible(false);
                if (buttonThemFile != null) buttonThemFile.setVisible(false);
                return;
            }
            
            boolean hasInvoiceCreated = currentKhoanThu.isTaoHoaDon();
            boolean hasAccountantPermission = hasHoaDonPermission(); // Ch·ªâ K·∫ø to√°n
            boolean isBenThuBa = "B√™n th·ª© 3".equals(currentKhoanThu.getGhiChu());
            
            // N√∫t "T·∫°o h√≥a ƒë∆°n" (cho Ban qu·∫£n l√Ω)
            if (buttonTaoHoaDon != null) {
                boolean shouldShowCreateInvoice = hasAccountantPermission && !hasInvoiceCreated && !isBenThuBa;
                buttonTaoHoaDon.setVisible(shouldShowCreateInvoice);
                System.out.println("DEBUG: buttonTaoHoaDon visible = " + shouldShowCreateInvoice + 
                    " (hasAccountantPermission=" + hasAccountantPermission + 
                    ", hasInvoiceCreated=" + hasInvoiceCreated + 
                    ", isBenThuBa=" + isBenThuBa + ")");
            }
            
            // N√∫t "Nh·∫≠p excel h√≥a ƒë∆°n" (cho B√™n th·ª© 3)
            if (buttonThemFile != null) {
                boolean shouldShowImportExcel = hasAccountantPermission && !hasInvoiceCreated && isBenThuBa;
                buttonThemFile.setVisible(shouldShowImportExcel);
                System.out.println("DEBUG: buttonThemFile visible = " + shouldShowImportExcel + 
                    " (hasAccountantPermission=" + hasAccountantPermission + 
                    ", hasInvoiceCreated=" + hasInvoiceCreated + 
                    ", isBenThuBa=" + isBenThuBa + ")");
            }
            
        } catch (Exception e) {
            System.err.println("Warning: Could not update invoice buttons visibility: " + e.getMessage());
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t visibility c·ªßa c√°c button sau khi t·∫°o h√≥a ƒë∆°n th√†nh c√¥ng
     */
    private void updateButtonVisibilityAfterInvoiceCreation() {
        try {
            if (currentKhoanThu != null && currentKhoanThu.isTaoHoaDon()) {
                // ·∫®n n√∫t "Nh·∫≠p excel h√≥a ƒë∆°n" v√¨ ƒë√£ t·∫°o
                if (buttonThemFile != null) {
                    buttonThemFile.setVisible(false);
                }
                
                // ·∫®n n√∫t "T·∫°o h√≥a ƒë∆°n" v√¨ ƒë√£ t·∫°o
                if (buttonTaoHoaDon != null) {
                    buttonTaoHoaDon.setVisible(false);
                }
                
                System.out.println("üîÑ Updated button visibility after invoice creation - both buttons hidden");
            }
        } catch (Exception e) {
            System.err.println("Warning: Could not update button visibility: " + e.getMessage());
        }
    }
}
