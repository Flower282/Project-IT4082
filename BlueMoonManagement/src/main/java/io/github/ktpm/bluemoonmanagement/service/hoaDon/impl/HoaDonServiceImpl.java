package io.github.ktpm.bluemoonmanagement.service.hoaDon.impl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import io.github.ktpm.bluemoonmanagement.model.dto.ResponseDto;
import io.github.ktpm.bluemoonmanagement.model.dto.canHo.CanHoHoaDonDto;
import io.github.ktpm.bluemoonmanagement.model.dto.hoaDon.HoaDonDto;
import io.github.ktpm.bluemoonmanagement.model.dto.hoaDon.HoaDonTuNguyenDto;
import io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuDto;
import io.github.ktpm.bluemoonmanagement.model.dto.khoanThu.KhoanThuTuNguyenDto;
import io.github.ktpm.bluemoonmanagement.model.dto.hoaDon.HoaDonDichVuDto;
import io.github.ktpm.bluemoonmanagement.model.entity.CanHo;
import io.github.ktpm.bluemoonmanagement.model.entity.HoaDon;
import io.github.ktpm.bluemoonmanagement.model.entity.KhoanThu;
import io.github.ktpm.bluemoonmanagement.model.mapper.CanHoMapper;
import io.github.ktpm.bluemoonmanagement.model.mapper.HoaDonMapper;
import io.github.ktpm.bluemoonmanagement.repository.CanHoRepository;
import io.github.ktpm.bluemoonmanagement.repository.HoaDonRepository;
import io.github.ktpm.bluemoonmanagement.repository.KhoanThuRepository;
import io.github.ktpm.bluemoonmanagement.service.hoaDon.HoaDonService;
import io.github.ktpm.bluemoonmanagement.session.Session;
import io.github.ktpm.bluemoonmanagement.util.XlxsFileUtil;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.FileOutputStream;
import java.util.function.Function;

@Service
public class HoaDonServiceImpl implements HoaDonService {
    
    private final HoaDonRepository hoaDonRepository;
    private final CanHoRepository canHoRepository;
    private final KhoanThuRepository khoanThuRepository;
    private final HoaDonMapper hoaDonMapper;
    private final CanHoMapper canHoMapper;
    
    public HoaDonServiceImpl(HoaDonRepository hoaDonRepository, HoaDonMapper hoaDonMapper, CanHoRepository canHoRepository, CanHoMapper canHoMapper, KhoanThuRepository khoanThuRepository) {
        this.hoaDonRepository = hoaDonRepository;
        this.canHoRepository = canHoRepository;
        this.hoaDonMapper = hoaDonMapper;
        this.canHoMapper = canHoMapper;
        this.khoanThuRepository = khoanThuRepository;
    }
    

    private List<CanHoHoaDonDto> getCanHoHoaDonDtoList() {
        // Use eager fetching to avoid LazyInitializationException
        List<CanHo> canHoList = canHoRepository.findAllWithPhuongTien();
        return canHoList.stream()
                .map(canHoMapper::toCanHoHoaDonDto)
                .collect(Collectors.toList());
    }

    @Override
    public ResponseDto generateHoaDon(KhoanThuDto khoanThuDto) {
        System.out.println("üéØ === STARTING generateHoaDon() ===");
        System.out.println("üìã Fee details: " + khoanThuDto.getTenKhoanThu() + " (ID: " + khoanThuDto.getMaKhoanThu() + ")");
        
        // Check user permissions first
        if (Session.getCurrentUser() == null || !Session.getCurrentUser().getVaiTro().equals("K·∫ø to√°n")) {
            System.out.println("‚ùå Permission denied: User is not accountant");
            return new ResponseDto(false, "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o h√≥a ƒë∆°n. Ch·ªâ K·∫ø to√°n m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y.");
        }

        // Validate fee exists and is in correct state
        if (khoanThuDto == null || khoanThuDto.isTaoHoaDon()) {
            System.out.println("‚ùå Fee validation failed: already has invoice or is null");
            return new ResponseDto(false, "Kho·∫£n thu ƒë√£ t·∫°o h√≥a ƒë∆°n ho·∫∑c kh√¥ng h·ª£p l·ªá!");
        }
        
        // Early validation for field lengths to prevent database errors
        if (khoanThuDto.getMaKhoanThu() != null && khoanThuDto.getMaKhoanThu().length() > 15) {
            System.err.println("‚ùå Fee code too long: '" + khoanThuDto.getMaKhoanThu() + "' (" + 
                             khoanThuDto.getMaKhoanThu().length() + " chars > 15 limit)");
            return new ResponseDto(false, "M√£ kho·∫£n thu qu√° d√†i (" + khoanThuDto.getMaKhoanThu().length() + 
                                 " k√Ω t·ª±), v∆∞·ª£t qu√° gi·ªõi h·∫°n 15 k√Ω t·ª± c·ªßa database!");
        }

        System.out.println("‚úÖ Permissions and validation passed");

        try {
            // Load fee entity
            KhoanThu khoanThuEntity = khoanThuRepository.findById(khoanThuDto.getMaKhoanThu()).orElse(null);
            if (khoanThuEntity == null) {
                return new ResponseDto(false, "Kh√¥ng t√¨m th·∫•y kho·∫£n thu trong h·ªá th·ªëng!");
            }

            // Load apartments with simple query
            List<CanHo> danhSachCanHo;
            try {
                danhSachCanHo = canHoRepository.findAll();
                System.out.println("üìä Loaded " + danhSachCanHo.size() + " apartments from database");
            } catch (Exception e) {
                System.err.println("‚ùå Failed to load apartments: " + e.getMessage());
                return new ResponseDto(false, "Kh√¥ng th·ªÉ t·∫£i danh s√°ch cƒÉn h·ªô!");
            }

            // ===== B∆Ø·ªöC L·ªåC NHANH B·∫∞NG STREAM API =====
            List<CanHo> eligibleApartments;
            
            if ("Ph∆∞∆°ng ti·ªán".equals(khoanThuDto.getDonViTinh())) {
                System.out.println("üîç L·ªçc cƒÉn h·ªô ƒë·ªß ƒëi·ªÅu ki·ªán cho ph√≠ ph∆∞∆°ng ti·ªán...");
                
                // L·∫•y danh s√°ch cƒÉn h·ªô c√≥ ph∆∞∆°ng ti·ªán
                List<CanHo> apartmentsWithVehicles = canHoRepository.findAllWithPhuongTien();
                System.out.println("üìã Found " + apartmentsWithVehicles.size() + " apartments with vehicle data");
                
                // L·ªçc cƒÉn h·ªô: ƒêANG S·ª¨ D·ª§NG + C√ì PH∆Ø∆†NG TI·ªÜN
                eligibleApartments = apartmentsWithVehicles.stream()
                        .filter(canHo -> {
                            // ƒêi·ªÅu ki·ªán 1: CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng
                            boolean isOccupied = "ƒêang s·ª≠ d·ª•ng".equals(canHo.getTrangThaiSuDung());
                            
                            // ƒêi·ªÅu ki·ªán 2: C√≥ ph∆∞∆°ng ti·ªán
                            boolean hasVehicles = canHo.getPhuongTienList() != null && 
                                                !canHo.getPhuongTienList().isEmpty();
                            
                            if (isOccupied && hasVehicles) {
                                System.out.println("   ‚úÖ " + canHo.getMaCanHo() + " - ƒêang s·ª≠ d·ª•ng + C√≥ " + 
                                                 canHo.getPhuongTienList().size() + " ph∆∞∆°ng ti·ªán");
                                return true;
                            } else {
                                System.out.println("   ‚ùå " + canHo.getMaCanHo() + " - B·ªè qua (S·ª≠ d·ª•ng: " + 
                                                 isOccupied + ", C√≥ xe: " + hasVehicles + ")");
                                return false;
                            }
                        })
                        .collect(java.util.stream.Collectors.toList());
                        
                System.out.println("üéØ K·∫øt qu·∫£ l·ªçc: " + eligibleApartments.size() + "/" + 
                                 apartmentsWithVehicles.size() + " cƒÉn h·ªô ƒë·ªß ƒëi·ªÅu ki·ªán");
                
            } else if ("Di·ªán t√≠ch".equals(khoanThuDto.getDonViTinh()) && 
                      "CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng".equals(khoanThuDto.getPhamVi())) {
                System.out.println("üîç L·ªçc cƒÉn h·ªô ƒëang s·ª≠ d·ª•ng cho ph√≠ di·ªán t√≠ch...");
                
                // L·ªçc ch·ªâ cƒÉn h·ªô ƒëang s·ª≠ d·ª•ng
                eligibleApartments = danhSachCanHo.stream()
                        .filter(canHo -> "ƒêang s·ª≠ d·ª•ng".equals(canHo.getTrangThaiSuDung()))
                        .collect(java.util.stream.Collectors.toList());
                        
                System.out.println("üéØ K·∫øt qu·∫£ l·ªçc: " + eligibleApartments.size() + "/" + 
                                 danhSachCanHo.size() + " cƒÉn h·ªô ƒëang s·ª≠ d·ª•ng");
                                 
            } else {
                System.out.println("üîç S·ª≠ d·ª•ng t·∫•t c·∫£ cƒÉn h·ªô (kh√¥ng c·∫ßn l·ªçc ƒë·∫∑c bi·ªát)");
                eligibleApartments = danhSachCanHo;
            }

            int totalInvoicesCreated = 0;
            int totalErrors = 0;

            // Create invoices for filtered apartments only
            System.out.println("üè≠ B·∫Øt ƒë·∫ßu t·∫°o h√≥a ƒë∆°n cho " + eligibleApartments.size() + " cƒÉn h·ªô ƒë√£ l·ªçc...");
            
            for (CanHo canHo : eligibleApartments) {
                try {
                    // Validate apartment code length to prevent database errors
                    if (canHo.getMaCanHo() != null && canHo.getMaCanHo().length() > 15) {
                        System.err.println("‚ùå Skipping apartment " + canHo.getMaCanHo() + " - Code too long (" + 
                                         canHo.getMaCanHo().length() + " chars > 15 limit)");
                        totalErrors++;
                        continue;
                    }
                    
                    System.out.println("üè† Processing apartment: " + canHo.getMaCanHo() + " (Length: " + 
                                     (canHo.getMaCanHo() != null ? canHo.getMaCanHo().length() : "null") + " chars)");
                    
                    // Calculate amount - now simplified since we pre-filtered
                    Integer soTien = calculateOptimizedInvoiceAmount(khoanThuDto, canHo);
                    if (soTien == null || soTien <= 0) {
                        System.out.println("‚è≠Ô∏è Skipping apartment " + canHo.getMaCanHo() + " (amount = " + soTien + ")");
                        continue;
                    }

                    // Validate fee code length  
                    if (khoanThuEntity.getMaKhoanThu() != null && khoanThuEntity.getMaKhoanThu().length() > 15) {
                        System.err.println("‚ùå Skipping apartment " + canHo.getMaCanHo() + " - Fee code too long (" + 
                                         khoanThuEntity.getMaKhoanThu().length() + " chars > 15 limit)");
                        totalErrors++;
                        continue;
                    }

                    // Create invoice entity
                    HoaDon hoaDon = new HoaDon();
                    // Don't set maHoaDon - let database auto-generate
                    hoaDon.setKhoanThu(khoanThuEntity);
                    hoaDon.setCanHo(canHo);
                    hoaDon.setSoTien(soTien);
                    hoaDon.setDaNop(false);

                    System.out.println("üíæ Saving invoice: Apartment=" + canHo.getMaCanHo() + 
                                     ", Fee=" + khoanThuEntity.getMaKhoanThu() + 
                                     ", Amount=" + String.format("%,d", soTien));

                    // Save invoice
                    HoaDon savedHoaDon = hoaDonRepository.save(hoaDon);
                    System.out.println("‚úÖ Created invoice " + savedHoaDon.getMaHoaDon() + " for apartment " + canHo.getMaCanHo() + " (Amount: " + String.format("%,d", soTien) + " VND)");
                    totalInvoicesCreated++;

                } catch (org.springframework.dao.DataIntegrityViolationException e) {
                    System.err.println("‚ùå Database constraint violation for apartment " + canHo.getMaCanHo() + ": " + e.getMessage());
                    if (e.getMessage().contains("value too long")) {
                        System.err.println("   üí° Suggestion: Check if apartment code '" + canHo.getMaCanHo() + 
                                         "' (length: " + canHo.getMaCanHo().length() + ") exceeds database field limit");
                    }
                    totalErrors++;
                } catch (Exception e) {
                    System.err.println("‚ùå Error creating invoice for apartment " + canHo.getMaCanHo() + ": " + e.getMessage());
                    totalErrors++;
                }
            }

            // Update fee status if any invoices were created
            if (totalInvoicesCreated > 0) {
                try {
                    khoanThuEntity.setTaoHoaDon(true);
                    khoanThuRepository.save(khoanThuEntity);
                    System.out.println("‚úÖ Updated fee status to 'invoice created'");
                } catch (Exception e) {
                    System.err.println("‚ùå Failed to update fee status: " + e.getMessage());
                }
            }

            System.out.println("üéØ === INVOICE GENERATION COMPLETED ===");
            System.out.println("üìà Total invoices created: " + totalInvoicesCreated);
            System.out.println("‚ùå Total errors: " + totalErrors);

            if (totalInvoicesCreated > 0) {
                return new ResponseDto(true, 
                    "‚úÖ T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng!\n\n" +
                    "üìä Th·ªëng k√™:\n" +
                    "‚Ä¢ Kho·∫£n thu: " + khoanThuDto.getTenKhoanThu() + "\n" +
                    "‚Ä¢ S·ªë h√≥a ƒë∆°n t·∫°o: " + totalInvoicesCreated + "\n" +
                    "‚Ä¢ S·ªë l·ªói: " + totalErrors + "\n\n" +
                    "üéØ Tr·∫°ng th√°i kho·∫£n thu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh 'ƒê√£ t·∫°o'\n" +
                    "üìã H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database v√† s·∫Ω hi·ªÉn th·ªã trong b·∫£ng 'L·ªãch s·ª≠ thu'\n\n" +
                    "üí° Vui l√≤ng ki·ªÉm tra tab 'L·ªãch s·ª≠ thu' ƒë·ªÉ xem danh s√°ch h√≥a ƒë∆°n m·ªõi ƒë∆∞·ª£c t·∫°o!");
            } else {
                return new ResponseDto(false, "Kh√¥ng t·∫°o ƒë∆∞·ª£c h√≥a ƒë∆°n n√†o. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu!");
            }

        } catch (Exception e) {
            System.err.println("‚ùå MAJOR ERROR in generateHoaDon: " + e.getMessage());
            e.printStackTrace();
            return new ResponseDto(false, "L·ªói h·ªá th·ªëng khi t·∫°o h√≥a ƒë∆°n: " + e.getMessage());
        }
    }
    
    /**
     * Optimized invoice amount calculation for pre-filtered apartments
     */
    private Integer calculateOptimizedInvoiceAmount(KhoanThuDto khoanThuDto, CanHo canHo) {
        try {
            String donViTinh = khoanThuDto.getDonViTinh();
            System.out.println("üí∞ T√≠nh ph√≠ t·ªëi ∆∞u cho cƒÉn h·ªô " + canHo.getMaCanHo() + " (ƒê∆°n v·ªã: " + donViTinh + ")");
            
            switch (donViTinh) {
                case "Di·ªán t√≠ch":
                    // T√≠nh ph√≠ theo di·ªán t√≠ch - ƒë√£ l·ªçc tr∆∞·ªõc n√™n kh√¥ng c·∫ßn ki·ªÉm tra ƒëi·ªÅu ki·ªán
                    int areaFee = (int) Math.ceil(khoanThuDto.getSoTien() * canHo.getDienTich());
                    System.out.println("   üìê Ph√≠ di·ªán t√≠ch: " + String.format("%,d", khoanThuDto.getSoTien()) + 
                                     " x " + canHo.getDienTich() + "m¬≤ = " + String.format("%,d", areaFee) + " VND");
                    return areaFee;
                    
                case "Ph∆∞∆°ng ti·ªán":
                    // T√≠nh ph√≠ ph∆∞∆°ng ti·ªán - ƒë√£ l·ªçc tr∆∞·ªõc n√™n ch·∫Øc ch·∫Øn c√≥ xe
                    return calculateVehicleFeeOptimized(khoanThuDto, canHo);
                    
                default:
                    // C√°c lo·∫°i ph√≠ kh√°c
                    int baseFee = khoanThuDto.getSoTien();
                    System.out.println("   üí∞ Ph√≠ c∆° b·∫£n: " + String.format("%,d", baseFee) + " VND");
                    return baseFee;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t√≠nh ph√≠ t·ªëi ∆∞u cho cƒÉn h·ªô " + canHo.getMaCanHo() + ": " + e.getMessage());
            return null;
        }
    }
    
    /**
     * Optimized vehicle fee calculation - assumes apartment already has vehicles
     */
    private Integer calculateVehicleFeeOptimized(KhoanThuDto khoanThuDto, CanHo canHo) {
        try {
            System.out.println("   üöó T√≠nh ph√≠ ph∆∞∆°ng ti·ªán t·ªëi ∆∞u cho cƒÉn h·ªô: " + canHo.getMaCanHo());
            
            // CƒÉn h·ªô ƒë√£ ƒë∆∞·ª£c l·ªçc tr∆∞·ªõc, ch·∫Øc ch·∫Øn c√≥ ph∆∞∆°ng ti·ªán
            List<io.github.ktpm.bluemoonmanagement.model.entity.PhuongTien> phuongTienList = canHo.getPhuongTienList();
            
            // ƒê·∫øm nhanh t·ª´ng lo·∫°i xe b·∫±ng Stream API
            long countXeDap = phuongTienList.stream()
                    .filter(pt -> "Xe ƒë·∫°p".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            long countXeMay = phuongTienList.stream()
                    .filter(pt -> "Xe m√°y".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            long countOto = phuongTienList.stream()
                    .filter(pt -> "√î t√¥".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            System.out.println("   üìä Ph∆∞∆°ng ti·ªán: Xe ƒë·∫°p=" + countXeDap + ", Xe m√°y=" + countXeMay + ", √î t√¥=" + countOto);
            
            // T√≠nh ph√≠ nhanh b·∫±ng Stream API
            int totalVehicleFee = 0;
            
            if (khoanThuDto.getPhiGuiXeList() != null) {
                // Map lo·∫°i xe -> ph√≠, t√≠nh t·ªïng
                totalVehicleFee = khoanThuDto.getPhiGuiXeList().stream()
                        .mapToInt(phi -> {
                            String loaiXe = phi.getLoaiXe();
                            int soLuong = 0;
                            
                            switch (loaiXe) {
                                case "Xe ƒë·∫°p": soLuong = (int) countXeDap; break;
                                case "Xe m√°y": soLuong = (int) countXeMay; break;
                                case "√î t√¥": soLuong = (int) countOto; break;
                            }
                            
                            int phiLoaiXe = soLuong * phi.getSoTien();
                            if (soLuong > 0) {
                                System.out.println("     ‚Ä¢ " + loaiXe + ": " + soLuong + " x " + 
                                                 String.format("%,d", phi.getSoTien()) + " = " + 
                                                 String.format("%,d", phiLoaiXe) + " VND");
                            }
                            return phiLoaiXe;
                        })
                        .sum();
                        
                System.out.println("   üéØ T·ªîNG PH√ç PH∆Ø∆†NG TI·ªÜN: " + String.format("%,d", totalVehicleFee) + " VND");
            } else {
                totalVehicleFee = khoanThuDto.getSoTien();
                System.out.println("   ‚ö†Ô∏è Kh√¥ng c√≥ b·∫£ng gi√° -> D√πng ph√≠ c∆° b·∫£n: " + String.format("%,d", totalVehicleFee) + " VND");
            }
            
            return totalVehicleFee;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t√≠nh ph√≠ ph∆∞∆°ng ti·ªán t·ªëi ∆∞u: " + e.getMessage());
            return 0;
        }
    }
    
    /**
     * Simple invoice amount calculation to avoid complex logic that might cause exceptions
     */
    private Integer calculateSimpleInvoiceAmount(KhoanThuDto khoanThuDto, CanHo canHo) {
        try {
            String donViTinh = khoanThuDto.getDonViTinh();
            System.out.println("üí∞ Calculating fee for apartment " + canHo.getMaCanHo() + " with unit: " + donViTinh);
            
            switch (donViTinh) {
                case "Di·ªán t√≠ch":
                    // T√≠nh ph√≠ theo di·ªán t√≠ch
                    if (khoanThuDto.getPhamVi().equals("CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng") && 
                        !canHo.getTrangThaiSuDung().equals("ƒêang s·ª≠ d·ª•ng")) {
                        System.out.println("   ‚è≠Ô∏è B·ªè qua cƒÉn h·ªô kh√¥ng s·ª≠ d·ª•ng: " + canHo.getMaCanHo());
                        return 0;
                    }
                    int areaFee = (int) Math.ceil(khoanThuDto.getSoTien() * canHo.getDienTich());
                    System.out.println("   üìê Ph√≠ theo di·ªán t√≠ch: " + khoanThuDto.getSoTien() + " x " + canHo.getDienTich() + "m¬≤ = " + areaFee + " VND");
                    return areaFee;
                    
                case "Ph∆∞∆°ng ti·ªán":
                    // T√≠nh ph√≠ theo ph∆∞∆°ng ti·ªán th·ª±c t·∫ø
                    return calculateVehicleFeeFromDatabase(khoanThuDto, canHo);
                    
                default:
                    // C√°c lo·∫°i ph√≠ kh√°c d√πng s·ªë ti·ªÅn c∆° b·∫£n
                    int baseFee = khoanThuDto.getSoTien();
                    System.out.println("   üí∞ Ph√≠ c∆° b·∫£n: " + baseFee + " VND");
                    return baseFee;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t√≠nh to√°n ph√≠ cho cƒÉn h·ªô " + canHo.getMaCanHo() + ": " + e.getMessage());
            return null;
        }
    }
    
    /**
     * T√≠nh ph√≠ ph∆∞∆°ng ti·ªán d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ database
     */
    private Integer calculateVehicleFeeFromDatabase(KhoanThuDto khoanThuDto, CanHo canHo) {
        try {
            System.out.println("   üöó Ki·ªÉm tra ƒëi·ªÅu ki·ªán ph√≠ ph∆∞∆°ng ti·ªán cho cƒÉn h·ªô: " + canHo.getMaCanHo());
            
            // ƒêI·ªÄU KI·ªÜN 1: CƒÉn h·ªô ph·∫£i ƒëang c√≥ ng∆∞·ªùi ·ªü
            if (!"ƒêang s·ª≠ d·ª•ng".equals(canHo.getTrangThaiSuDung())) {
                System.out.println("   ‚ùå CƒÉn h·ªô " + canHo.getMaCanHo() + " kh√¥ng ƒëang s·ª≠ d·ª•ng (Tr·∫°ng th√°i: " + canHo.getTrangThaiSuDung() + ") -> B·ªè qua");
                return 0;
            }
            
            // ƒêI·ªÄU KI·ªÜN 2: L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán t·ª´ database
            CanHo apartmentWithVehicles = canHoRepository.findAllWithPhuongTien().stream()
                    .filter(c -> c.getMaCanHo().equals(canHo.getMaCanHo()))
                    .findFirst()
                    .orElse(canHo);
            
            List<io.github.ktpm.bluemoonmanagement.model.entity.PhuongTien> phuongTienList = 
                apartmentWithVehicles.getPhuongTienList();
            
            if (phuongTienList == null || phuongTienList.isEmpty()) {
                System.out.println("   ‚ùå CƒÉn h·ªô " + canHo.getMaCanHo() + " kh√¥ng c√≥ ph∆∞∆°ng ti·ªán n√†o -> B·ªè qua (Ph√≠ = 0)");
                return 0;
            }
            
            System.out.println("   ‚úÖ CƒÉn h·ªô " + canHo.getMaCanHo() + " ƒë·ªß ƒëi·ªÅu ki·ªán:");
            System.out.println("     ‚Ä¢ Tr·∫°ng th√°i: " + canHo.getTrangThaiSuDung());
            System.out.println("     ‚Ä¢ S·ªë ph∆∞∆°ng ti·ªán: " + phuongTienList.size() + " chi·∫øc");
            
            // ƒê·∫øm t·ª´ng lo·∫°i xe
            long countXeDap = phuongTienList.stream()
                    .filter(pt -> "Xe ƒë·∫°p".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            long countXeMay = phuongTienList.stream()
                    .filter(pt -> "Xe m√°y".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            long countOto = phuongTienList.stream()
                    .filter(pt -> "√î t√¥".equals(pt.getLoaiPhuongTien()))
                    .count();
            
            System.out.println("   üìä Chi ti·∫øt ph∆∞∆°ng ti·ªán:");
            System.out.println("     ‚Ä¢ Xe ƒë·∫°p: " + countXeDap + " chi·∫øc");
            System.out.println("     ‚Ä¢ Xe m√°y: " + countXeMay + " chi·∫øc"); 
            System.out.println("     ‚Ä¢ √î t√¥: " + countOto + " chi·∫øc");
            
            // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 ph∆∞∆°ng ti·ªán
            if (countXeDap == 0 && countXeMay == 0 && countOto == 0) {
                System.out.println("   ‚ùå Kh√¥ng c√≥ ph∆∞∆°ng ti·ªán h·ª£p l·ªá -> B·ªè qua (Ph√≠ = 0)");
                return 0;
            }
            
            // L·∫•y b·∫£ng gi√° t·ª´ kho·∫£n thu v√† t√≠nh ph√≠
            int totalVehicleFee = 0;
            
            if (khoanThuDto.getPhiGuiXeList() != null && !khoanThuDto.getPhiGuiXeList().isEmpty()) {
                // T√≠nh ph√≠ xe ƒë·∫°p
                int phiXeDap = khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phi -> "Xe ƒë·∫°p".equals(phi.getLoaiXe()))
                        .findFirst()
                        .map(phi -> phi.getSoTien())
                        .orElse(0);
                int tienXeDap = (int)(countXeDap * phiXeDap);
                
                // T√≠nh ph√≠ xe m√°y
                int phiXeMay = khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phi -> "Xe m√°y".equals(phi.getLoaiXe()))
                        .findFirst()
                        .map(phi -> phi.getSoTien())
                        .orElse(0);
                int tienXeMay = (int)(countXeMay * phiXeMay);
                
                // T√≠nh ph√≠ √¥ t√¥
                int phiOto = khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phi -> "√î t√¥".equals(phi.getLoaiXe()))
                        .findFirst()
                        .map(phi -> phi.getSoTien())
                        .orElse(0);
                int tienOto = (int)(countOto * phiOto);
                
                // T·ªïng ph√≠
                totalVehicleFee = tienXeDap + tienXeMay + tienOto;
                
                System.out.println("   üí∞ Chi ti·∫øt t√≠nh ph√≠:");
                System.out.println("     ‚Ä¢ Xe ƒë·∫°p: " + countXeDap + " x " + String.format("%,d", phiXeDap) + " = " + String.format("%,d", tienXeDap) + " VND");
                System.out.println("     ‚Ä¢ Xe m√°y: " + countXeMay + " x " + String.format("%,d", phiXeMay) + " = " + String.format("%,d", tienXeMay) + " VND");
                System.out.println("     ‚Ä¢ √î t√¥: " + countOto + " x " + String.format("%,d", phiOto) + " = " + String.format("%,d", tienOto) + " VND");
                System.out.println("     ‚Ä¢ üéØ T·ªîNG PH√ç: " + String.format("%,d", totalVehicleFee) + " VND");
                
            } else {
                System.out.println("   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£ng gi√° ph∆∞∆°ng ti·ªán -> S·ª≠ d·ª•ng ph√≠ c∆° b·∫£n");
                totalVehicleFee = khoanThuDto.getSoTien();
            }
            
            return totalVehicleFee;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t√≠nh ph√≠ ph∆∞∆°ng ti·ªán cho cƒÉn h·ªô " + canHo.getMaCanHo() + ": " + e.getMessage());
            e.printStackTrace();
            
            // Fallback: Tr·∫£ v·ªÅ 0 n·∫øu c√≥ l·ªói ƒë·ªÉ b·ªè qua cƒÉn h·ªô n√†y
            System.out.println("   üîÑ Fallback: B·ªè qua cƒÉn h·ªô do l·ªói (Ph√≠ = 0)");
            return 0;
        }
    }
    
    /**
     * Calculate invoice amount based on fee type and apartment details
     */
    private Integer calculateInvoiceAmount(KhoanThuDto khoanThuDto, CanHo canHo) {
        try {
            String donViTinh = khoanThuDto.getDonViTinh();
            System.out.println("üí∞ Calculating fee with unit: " + donViTinh + ", scope: " + khoanThuDto.getPhamVi());
            
            switch (donViTinh) {
                case "Di·ªán t√≠ch":
                    if (khoanThuDto.getPhamVi().equals("T·∫•t c·∫£")) {
                        int soTien = (int) Math.ceil(khoanThuDto.getSoTien() * canHo.getDienTich());
                        System.out.println("   üìê Area-based calculation (All): " + khoanThuDto.getSoTien() + " x " + canHo.getDienTich() + " = " + soTien);
                        return soTien;
                    } else if (khoanThuDto.getPhamVi().equals("CƒÉn h·ªô ƒëang s·ª≠ d·ª•ng")) {
                        if (canHo.getTrangThaiSuDung().equals("ƒêang s·ª≠ d·ª•ng")) {
                            int soTien = (int) Math.ceil(khoanThuDto.getSoTien() * canHo.getDienTich());
                            System.out.println("   üìê Area-based calculation (In-use): " + khoanThuDto.getSoTien() + " x " + canHo.getDienTich() + " = " + soTien);
                            return soTien;
                        } else {
                            System.out.println("   ‚è≠Ô∏è Skipping apartment " + canHo.getMaCanHo() + " (not in use: " + canHo.getTrangThaiSuDung() + ")");
                            return 0;
                        }
                    }
                    break;
                    
                case "Ph∆∞∆°ng ti·ªán":
                    try {
                        // Load vehicles for this apartment with explicit handling
                        List<io.github.ktpm.bluemoonmanagement.model.entity.PhuongTien> phuongTienList = canHo.getPhuongTienList();
                        if (phuongTienList == null) {
                            System.out.println("   üöó No vehicles found for apartment " + canHo.getMaCanHo() + " (list is null)");
                            return 0;
                        }
                        
                        System.out.println("   üöó Found " + phuongTienList.size() + " vehicles for apartment " + canHo.getMaCanHo());
                        
                        // Calculate fees for each vehicle type
                        int totalVehicleFee = 0;
                        
                        // Count and calculate for Xe ƒë·∫°p
                        int countXeDap = (int) phuongTienList.stream()
                                .filter(phuongTien -> "Xe ƒë·∫°p".equals(phuongTien.getLoaiPhuongTien()))
                                        .count();
                        int soTienXeDap = khoanThuDto.getPhiGuiXeList() != null ? 
                                khoanThuDto.getPhiGuiXeList().stream()
                                    .filter(phiGuiXe -> "Xe ƒë·∫°p".equals(phiGuiXe.getLoaiXe()))
                                        .findFirst()
                                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                                    .orElse(0) : 0;
                    int tienGuiXeDap = countXeDap * soTienXeDap;

                        // Count and calculate for Xe m√°y  
                        int countXeMay = (int) phuongTienList.stream()
                                .filter(phuongTien -> "Xe m√°y".equals(phuongTien.getLoaiPhuongTien()))
                                        .count();
                        int soTienXeMay = khoanThuDto.getPhiGuiXeList() != null ?
                                khoanThuDto.getPhiGuiXeList().stream()
                                    .filter(phiGuiXe -> "Xe m√°y".equals(phiGuiXe.getLoaiXe()))
                                        .findFirst()
                                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                                    .orElse(0) : 0;
                    int tienGuiXeMay = countXeMay * soTienXeMay;

                        // Count and calculate for √î t√¥
                        int countOto = (int) phuongTienList.stream()
                                .filter(phuongTien -> "√î t√¥".equals(phuongTien.getLoaiPhuongTien()))
                                        .count();
                        int soTienOto = khoanThuDto.getPhiGuiXeList() != null ?
                                khoanThuDto.getPhiGuiXeList().stream()
                                    .filter(phiGuiXe -> "√î t√¥".equals(phiGuiXe.getLoaiXe()))
                                        .findFirst()
                                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                                    .orElse(0) : 0;
                    int tienGuiOto = countOto * soTienOto;
                        
                        totalVehicleFee = tienGuiXeDap + tienGuiXeMay + tienGuiOto;
                        
                        System.out.println("   üöó Vehicle calculation details:");
                        System.out.println("     - Xe ƒë·∫°p: " + countXeDap + " x " + soTienXeDap + " = " + tienGuiXeDap);
                        System.out.println("     - Xe m√°y: " + countXeMay + " x " + soTienXeMay + " = " + tienGuiXeMay);
                        System.out.println("     - √î t√¥: " + countOto + " x " + soTienOto + " = " + tienGuiOto);
                        System.out.println("     - Total: " + totalVehicleFee);
                        
                        return totalVehicleFee;
                        
                    } catch (org.hibernate.LazyInitializationException e) {
                        System.err.println("   ‚ùå LazyInitializationException when accessing vehicles for " + canHo.getMaCanHo() + ": " + e.getMessage());
                        // Fallback: try to get vehicles through repository
                        try {
                            CanHo reloadedCanHo = canHoRepository.findAllWithPhuongTien().stream()
                                    .filter(c -> c.getMaCanHo().equals(canHo.getMaCanHo()))
                                    .findFirst()
                                    .orElse(null);
                            if (reloadedCanHo != null && reloadedCanHo.getPhuongTienList() != null) {
                                System.out.println("   üîÑ Reloaded apartment with vehicles, trying calculation again...");
                                return calculateVehicleFeeFromList(khoanThuDto, reloadedCanHo.getPhuongTienList());
                            }
                        } catch (Exception ex) {
                            System.err.println("   ‚ùå Failed to reload apartment with vehicles: " + ex.getMessage());
                        }
                        
                        // Final fallback - return base amount if vehicle calculation fails
                        System.out.println("   ‚ö†Ô∏è Using base vehicle fee due to loading issues: " + khoanThuDto.getSoTien());
                        return khoanThuDto.getSoTien();
                    }
                    
                default:
                    System.out.println("   ‚ö†Ô∏è Unknown fee unit: " + donViTinh + ", using base amount");
                    return khoanThuDto.getSoTien();
            }
            
            return khoanThuDto.getSoTien(); // Default fallback
            
        } catch (Exception e) {
            System.err.println("‚ùå Error calculating invoice amount for apartment " + canHo.getMaCanHo() + ": " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Helper method to calculate vehicle fees from a given vehicle list
     */
    private Integer calculateVehicleFeeFromList(KhoanThuDto khoanThuDto, List<io.github.ktpm.bluemoonmanagement.model.entity.PhuongTien> phuongTienList) {
        try {
            if (phuongTienList == null || phuongTienList.isEmpty()) {
                return 0;
            }
            
            int totalVehicleFee = 0;
            
            // Count and calculate for each vehicle type
            int countXeDap = (int) phuongTienList.stream()
                    .filter(phuongTien -> "Xe ƒë·∫°p".equals(phuongTien.getLoaiPhuongTien()))
                    .count();
            int soTienXeDap = khoanThuDto.getPhiGuiXeList() != null ? 
                    khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phiGuiXe -> "Xe ƒë·∫°p".equals(phiGuiXe.getLoaiXe()))
                        .findFirst()
                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                        .orElse(0) : 0;
            
            int countXeMay = (int) phuongTienList.stream()
                    .filter(phuongTien -> "Xe m√°y".equals(phuongTien.getLoaiPhuongTien()))
                    .count();
            int soTienXeMay = khoanThuDto.getPhiGuiXeList() != null ?
                    khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phiGuiXe -> "Xe m√°y".equals(phiGuiXe.getLoaiXe()))
                        .findFirst()
                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                        .orElse(0) : 0;
            
            int countOto = (int) phuongTienList.stream()
                    .filter(phuongTien -> "√î t√¥".equals(phuongTien.getLoaiPhuongTien()))
                    .count();
            int soTienOto = khoanThuDto.getPhiGuiXeList() != null ?
                    khoanThuDto.getPhiGuiXeList().stream()
                        .filter(phiGuiXe -> "√î t√¥".equals(phiGuiXe.getLoaiXe()))
                        .findFirst()
                        .map(phiGuiXe -> phiGuiXe.getSoTien())
                        .orElse(0) : 0;
            
            totalVehicleFee = (countXeDap * soTienXeDap) + (countXeMay * soTienXeMay) + (countOto * soTienOto);
            
            System.out.println("   üöó Vehicle fee calculation from list: " + totalVehicleFee);
            return totalVehicleFee;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in calculateVehicleFeeFromList: " + e.getMessage());
            return 0;
        }
    }
    
    @Override
    public List<HoaDonDto> getAllHoaDon() {
        // Get all bills from repository
        List<HoaDon> hoaDonList = hoaDonRepository.findAll();
        // Convert entities to DTOs and return
        return hoaDonList.stream()
                .map(hoaDonMapper::toHoaDonDto)
                .collect(Collectors.toList());
    }

    @Override
    public ResponseDto addHoaDonTuNguyen(HoaDonTuNguyenDto hoaDonTuNguyenDto, KhoanThuTuNguyenDto khoanThuTuNguyenDto) {
        if (Session.getCurrentUser() == null || !"K·∫ø to√°n".equals(Session.getCurrentUser().getVaiTro())) {
            return new ResponseDto(false, "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m h√≥a ƒë∆°n t·ª± nguy·ªán. Ch·ªâ K·∫ø to√°n m·ªõi ƒë∆∞·ª£c ph√©p.");
        }
        hoaDonTuNguyenDto.setTenKhoanThu(khoanThuTuNguyenDto.getTenKhoanThu());
        HoaDon hoaDon = hoaDonMapper.fromHoaDonTuNguyenDto(hoaDonTuNguyenDto);
        hoaDon.setNgayNop(LocalDateTime.now());
        hoaDon.setDaNop(true);
        hoaDonRepository.save(hoaDon);
        KhoanThu khoanThu = khoanThuRepository.findById(khoanThuTuNguyenDto.getMaKhoanThu()).orElse(null);
        khoanThu.setTaoHoaDon(true);
        khoanThuRepository.save(khoanThu);
        return new ResponseDto(true, "H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng");
    }

    @Override
    public ResponseDto importFromExcel(MultipartFile file) {
        if (Session.getCurrentUser() == null || !"K·∫ø to√°n".equals(Session.getCurrentUser().getVaiTro())) {
            return new ResponseDto(false, "B·∫°n kh√¥ng c√≥ quy·ªÅn import h√≥a ƒë∆°n. Ch·ªâ K·∫ø to√°n m·ªõi ƒë∆∞·ª£c ph√©p.");
        }
        try {
            System.out.println("=== DEBUG: Starting HoaDon Excel import ===");
            File tempFile = File.createTempFile("hoadondichvu_temp", ".xlsx");
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(file.getBytes());
            }
            
            Function<Row, HoaDonDichVuDto> rowMapper = row -> {
                try {
                    // Skip header row
                    if (row.getRowNum() == 0) {
                        System.out.println("DEBUG: Skipping header row");
                        return null;
                    }
                    
                    System.out.println("DEBUG: Processing row " + row.getRowNum());
                    
                    HoaDonDichVuDto dto = new HoaDonDichVuDto();
                    
                    // T√™n kho·∫£n thu (column 0)
                    String tenKhoanThu = "";
                    if (row.getCell(0) != null) {
                        try {
                            tenKhoanThu = row.getCell(0).getStringCellValue();
                        } catch (Exception e) {
                            tenKhoanThu = String.valueOf(row.getCell(0).getNumericCellValue());
                        }
                    }
                    dto.setTenKhoanThu(tenKhoanThu);
                    System.out.println("DEBUG: T√™n kho·∫£n thu: " + tenKhoanThu);
                    
                    // M√£ cƒÉn h·ªô (column 1)
                    String maCanHo = "";
                    if (row.getCell(1) != null) {
                        try {
                            maCanHo = row.getCell(1).getStringCellValue();
                        } catch (Exception e) {
                            maCanHo = String.valueOf((long) row.getCell(1).getNumericCellValue());
                        }
                    }
                    dto.setMaCanHo(maCanHo);
                    System.out.println("DEBUG: M√£ cƒÉn h·ªô: " + maCanHo);
                    
                    // S·ªë ti·ªÅn (column 2)
                    int soTien = 0;
                    if (row.getCell(2) != null) {
                        try {
                            soTien = (int) row.getCell(2).getNumericCellValue();
                        } catch (Exception e) {
                            try {
                                String soTienStr = row.getCell(2).getStringCellValue().replaceAll("[^0-9]", "");
                                soTien = Integer.parseInt(soTienStr);
                            } catch (Exception e2) {
                                System.err.println("DEBUG: Kh√¥ng th·ªÉ ƒë·ªçc s·ªë ti·ªÅn ·ªü row " + row.getRowNum());
                                soTien = 0;
                            }
                        }
                    }
                    dto.setSoTien(soTien);
                    System.out.println("DEBUG: S·ªë ti·ªÅn: " + soTien);
                    
                    // Validation c∆° b·∫£n
                    if (tenKhoanThu.trim().isEmpty() || maCanHo.trim().isEmpty() || soTien <= 0) {
                        System.err.println("DEBUG: Invalid data at row " + row.getRowNum() + 
                            " - tenKhoanThu: '" + tenKhoanThu + "', maCanHo: '" + maCanHo + "', soTien: " + soTien);
                        return null;
                    }
                    
                    System.out.println("DEBUG: Successfully parsed row " + row.getRowNum());
                    return dto;
                } catch (Exception e) {
                    System.err.println("ERROR: L·ªói khi ƒë·ªçc d√≤ng Excel h√≥a ƒë∆°n row " + row.getRowNum() + ": " + e.getMessage());
                    e.printStackTrace();
                    return null;
                }
            };
            
            List<HoaDonDichVuDto> hoaDonDichVuDtoList = XlxsFileUtil.importFromExcel(tempFile.getAbsolutePath(), rowMapper);
            System.out.println("DEBUG: Parsed " + hoaDonDichVuDtoList.size() + " valid rows from Excel");
            
            // Filter out null values
            hoaDonDichVuDtoList = hoaDonDichVuDtoList.stream()
                .filter(dto -> dto != null)
                .collect(Collectors.toList());
            
            if (hoaDonDichVuDtoList.isEmpty()) {
                tempFile.delete();
                return new ResponseDto(false, "Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong file Excel. Vui l√≤ng ki·ªÉm tra l·∫°i format file.");
            }
            
            // Validate and map to entities
            List<HoaDon> hoaDonList = new ArrayList<>();
            for (HoaDonDichVuDto dto : hoaDonDichVuDtoList) {
                try {
                    // Check if apartment exists
                    CanHo canHo = canHoRepository.findById(dto.getMaCanHo()).orElse(null);
                    if (canHo == null) {
                        System.err.println("WARNING: CƒÉn h·ªô kh√¥ng t·ªìn t·∫°i: " + dto.getMaCanHo() + " - b·ªè qua h√≥a ƒë∆°n n√†y");
                        continue;
                    }
                    
                    // Create HoaDon entity
                    HoaDon hoaDon = new HoaDon();
                    hoaDon.setCanHo(canHo);
                    hoaDon.setSoTien(dto.getSoTien());
                    hoaDon.setDaNop(false); // M·∫∑c ƒë·ªãnh ch∆∞a n·ªôp
                    hoaDon.setNgayNop(null);
                    
                    // Create temporary KhoanThu for the invoice
                    KhoanThu khoanThu = new KhoanThu();
                    khoanThu.setTenKhoanThu(dto.getTenKhoanThu());
                    khoanThu.setBatBuoc(false); // Default to optional
                    khoanThu.setDonViTinh("Theo h√≥a ƒë∆°n");
                    khoanThu.setSoTien(0);
                    khoanThu.setPhamVi("Theo cƒÉn h·ªô");
                    khoanThu.setNgayTao(java.time.LocalDate.now());
                    khoanThu.setThoiHan(java.time.LocalDate.now().plusMonths(1));
                    khoanThu.setGhiChu("B√™n th·ª© 3");
                    khoanThu.setTaoHoaDon(true);
                    
                    // Save KhoanThu first if it doesn't exist
                    KhoanThu existingKhoanThu = khoanThuRepository.findAll().stream()
                        .filter(kt -> kt.getTenKhoanThu().equals(dto.getTenKhoanThu()))
                        .findFirst()
                        .orElse(null);
                    
                    if (existingKhoanThu == null) {
                        khoanThu = khoanThuRepository.save(khoanThu);
                        System.out.println("DEBUG: Created new KhoanThu: " + dto.getTenKhoanThu());
                    } else {
                        khoanThu = existingKhoanThu;
                        System.out.println("DEBUG: Using existing KhoanThu: " + dto.getTenKhoanThu());
                    }
                    
                    hoaDon.setKhoanThu(khoanThu);
                    hoaDonList.add(hoaDon);
                    
                } catch (Exception e) {
                    System.err.println("ERROR: L·ªói khi t·∫°o h√≥a ƒë∆°n t·ª´ DTO: " + e.getMessage());
                    continue;
                }
            }
            
            if (hoaDonList.isEmpty()) {
                tempFile.delete();
                return new ResponseDto(false, "Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n n√†o t·ª´ d·ªØ li·ªáu Excel. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ cƒÉn h·ªô.");
            }
            
            hoaDonRepository.saveAll(hoaDonList);
            tempFile.delete();
            
            System.out.println("DEBUG: Successfully imported " + hoaDonList.size() + " invoices");
            return new ResponseDto(true, "ƒê√£ import th√†nh c√¥ng " + hoaDonList.size() + " h√≥a ƒë∆°n t·ª´ file Excel.");
        } catch (Exception e) {
            System.err.println("ERROR: Import h√≥a ƒë∆°n t·ª´ Excel th·∫•t b·∫°i: " + e.getMessage());
            e.printStackTrace();
            return new ResponseDto(false, "Import h√≥a ƒë∆°n t·ª´ Excel th·∫•t b·∫°i: " + e.getMessage());
        }
    }

    @Override
    public ResponseDto updateTrangThaiThanhToan(Integer maHoaDon, boolean daNop) {
        try {
            System.out.println("üí∞ Updating payment status for invoice: " + maHoaDon + " to " + (daNop ? "PAID" : "UNPAID"));
            
            // T√¨m h√≥a ƒë∆°n trong database
            HoaDon hoaDon = hoaDonRepository.findById(maHoaDon).orElse(null);
            if (hoaDon == null) {
                System.err.println("‚ùå Invoice not found: " + maHoaDon);
                return new ResponseDto(false, "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n v·ªõi m√£: " + maHoaDon);
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            hoaDon.setDaNop(daNop);
            
            // C·∫≠p nh·∫≠t ng√†y n·ªôp n·∫øu ƒë√£ thanh to√°n
            if (daNop) {
                hoaDon.setNgayNop(LocalDateTime.now());
                System.out.println("‚úÖ Set payment date to: " + hoaDon.getNgayNop());
            } else {
                hoaDon.setNgayNop(null);
                System.out.println("üîÑ Cleared payment date");
            }
            
            // L∆∞u v√†o database
            hoaDonRepository.save(hoaDon);
            
            String statusMessage = daNop ? "ƒë√£ thanh to√°n" : "ch∆∞a thanh to√°n";
            System.out.println("‚úÖ Successfully updated invoice " + maHoaDon + " to " + statusMessage);
            
            return new ResponseDto(true, "C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n th√†nh c√¥ng: " + statusMessage);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error updating payment status: " + e.getMessage());
            e.printStackTrace();
            return new ResponseDto(false, "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n: " + e.getMessage());
        }
    }

    @Override
    public ResponseDto thuToanBoPhiCanHo(String maCanHo, List<HoaDonDto> hoaDonList) {
        try {
            System.out.println("üí∞ Starting bulk payment for apartment: " + maCanHo);
            System.out.println("   üìã Processing " + hoaDonList.size() + " invoices");
            
            // Ki·ªÉm tra quy·ªÅn
            if (Session.getCurrentUser() == null) {
                return new ResponseDto(false, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y");
            }
            
            String userRole = Session.getCurrentUser().getVaiTro();
            if (!"K·∫ø to√°n".equals(userRole)) {
                return new ResponseDto(false, "B·∫°n kh√¥ng c√≥ quy·ªÅn thu ph√≠. Ch·ªâ K·∫ø to√°n m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán");
            }
            
            if (hoaDonList == null || hoaDonList.isEmpty()) {
                return new ResponseDto(false, "Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o ƒë·ªÉ thu");
            }
            
            int successCount = 0;
            int totalAmount = 0;
            List<String> errors = new ArrayList<>();
            
            // X·ª≠ l√Ω t·ª´ng h√≥a ƒë∆°n
            for (HoaDonDto hoaDonDto : hoaDonList) {
                try {
                    // Ch·ªâ x·ª≠ l√Ω h√≥a ƒë∆°n ch∆∞a thanh to√°n
                    if (!hoaDonDto.isDaNop()) {
                        ResponseDto result = updateTrangThaiThanhToan(hoaDonDto.getMaHoaDon(), true);
                        if (result.isSuccess()) {
                            successCount++;
                            totalAmount += hoaDonDto.getSoTien() != null ? hoaDonDto.getSoTien() : 0;
                            System.out.println("   ‚úÖ Processed invoice: " + hoaDonDto.getMaHoaDon() + " - " + hoaDonDto.getTenKhoanThu());
                        } else {
                            errors.add("H√≥a ƒë∆°n " + hoaDonDto.getMaHoaDon() + ": " + result.getMessage());
                            System.err.println("   ‚ùå Failed to process invoice: " + hoaDonDto.getMaHoaDon());
                        }
                    } else {
                        System.out.println("   ‚è≠Ô∏è Skipping already paid invoice: " + hoaDonDto.getMaHoaDon());
                    }
                } catch (Exception e) {
                    errors.add("H√≥a ƒë∆°n " + hoaDonDto.getMaHoaDon() + ": " + e.getMessage());
                    System.err.println("   ‚ùå Exception processing invoice " + hoaDonDto.getMaHoaDon() + ": " + e.getMessage());
                }
            }
            
            // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
            StringBuilder message = new StringBuilder();
            message.append("Thu ph√≠ th√†nh c√¥ng cho cƒÉn h·ªô ").append(maCanHo).append("\n");
            message.append("üìä T·ªïng k·∫øt:\n");
            message.append("  ‚Ä¢ ƒê√£ thu: ").append(successCount).append(" h√≥a ƒë∆°n\n");
            message.append("  ‚Ä¢ T·ªïng ti·ªÅn: ").append(String.format("%,d", totalAmount)).append(" VNƒê\n");
            
            if (!errors.isEmpty()) {
                message.append("  ‚Ä¢ L·ªói: ").append(errors.size()).append(" h√≥a ƒë∆°n\n");
                message.append("\n‚ùå Chi ti·∫øt l·ªói:\n");
                for (String error : errors) {
                    message.append("  - ").append(error).append("\n");
                }
            }
            
            boolean isSuccess = successCount > 0;
            System.out.println("üèÅ Bulk payment completed: " + successCount + "/" + hoaDonList.size() + " success");
            
            return new ResponseDto(isSuccess, message.toString().trim());
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in bulk payment: " + e.getMessage());
            e.printStackTrace();
            return new ResponseDto(false, "L·ªói khi thu to√†n b·ªô ph√≠: " + e.getMessage());
        }
    }
}
